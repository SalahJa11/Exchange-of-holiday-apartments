{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"accessibilityHint\", \"onPress\", \"onLongPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\", \"testID\", \"accessible\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nvar Button = function Button(_ref) {\n  var disabled = _ref.disabled,\n    compact = _ref.compact,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'text' : _ref$mode,\n    dark = _ref.dark,\n    loading = _ref.loading,\n    icon = _ref.icon,\n    buttonColor = _ref.color,\n    children = _ref.children,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n    accessibilityLabel = _ref.accessibilityLabel,\n    accessibilityHint = _ref.accessibilityHint,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    style = _ref.style,\n    theme = _ref.theme,\n    contentStyle = _ref.contentStyle,\n    labelStyle = _ref.labelStyle,\n    testID = _ref.testID,\n    accessible = _ref.accessible,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _StyleSheet$flatten;\n  var _React$useRef = React.useRef(new Animated.Value(mode === 'contained' ? 2 : 0)),\n    elevation = _React$useRef.current;\n  React.useEffect(function () {\n    elevation.setValue(mode === 'contained' ? 2 : 0);\n  }, [mode, elevation]);\n  var handlePressIn = function handlePressIn() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  var handlePressOut = function handlePressOut() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  var colors = theme.colors,\n    roundness = theme.roundness;\n  var font = theme.fonts.medium;\n  var backgroundColor, borderColor, textColor, borderWidth;\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n  if (disabled) {\n    textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else if (mode === 'contained') {\n    var isDark;\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n    }\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n  var rippleColor = color(textColor).alpha(0.32).rgb().string();\n  var buttonStyle = {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: roundness\n  };\n  var touchableStyle = {\n    borderRadius: style ? (StyleSheet.flatten(style) || {}).borderRadius || roundness : roundness\n  };\n  var _ref2 = StyleSheet.flatten(labelStyle) || {},\n    customLabelColor = _ref2.color,\n    customLabelSize = _ref2.fontSize;\n  var textStyle = _objectSpread({\n    color: textColor\n  }, font);\n  var elevationRes = disabled || mode !== 'contained' ? 0 : elevation;\n  var iconStyle = ((_StyleSheet$flatten = StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, {\n      elevation: elevationRes\n    }, buttonStyle, style]\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(View, {\n    style: iconStyle\n  }, React.createElement(Icon, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? React.createElement(ActivityIndicator, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]\n  }, children))));\n};\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"mappings":"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","names":["React","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","useRef","Animated","Value","elevation","current","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","customLabelSize","fontSize","textStyle","elevationRes","iconStyle","flexDirection","styles","iconReverse","button","borderless","delayPressIn","onPressIn","onPressOut","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","View","content","source","size","selectable","numberOfLines","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"sources":["Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(mode === 'contained' ? 2 : 0)\n  );\n  React.useEffect(() => {\n    elevation.setValue(mode === 'contained' ? 2 : 0);\n  }, [mode, elevation]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const elevationRes = disabled || mode !== 'contained' ? 0 : elevation;\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation: elevationRes } as ViewStyle,\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"module"}