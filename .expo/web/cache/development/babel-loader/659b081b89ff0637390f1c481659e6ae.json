{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleNumberOfLines\", \"descriptionNumberOfLines\", \"titleEllipsizeMode\", \"descriptionEllipsizeMode\", \"descriptionStyle\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { withInternalTheme } from \"../../core/theming\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { getLeftStyles, getRightStyles } from \"./utils\";\nvar ListItem = function ListItem(_ref) {\n  var left = _ref.left,\n    right = _ref.right,\n    title = _ref.title,\n    description = _ref.description,\n    onPress = _ref.onPress,\n    theme = _ref.theme,\n    style = _ref.style,\n    titleStyle = _ref.titleStyle,\n    _ref$titleNumberOfLin = _ref.titleNumberOfLines,\n    titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,\n    _ref$descriptionNumbe = _ref.descriptionNumberOfLines,\n    descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,\n    titleEllipsizeMode = _ref.titleEllipsizeMode,\n    descriptionEllipsizeMode = _ref.descriptionEllipsizeMode,\n    descriptionStyle = _ref.descriptionStyle,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    alignToTop = _React$useState2[0],\n    setAlignToTop = _React$useState2[1];\n  var onDescriptionTextLayout = function onDescriptionTextLayout(event) {\n    if (!theme.isV3) {\n      return;\n    }\n    var nativeEvent = event.nativeEvent;\n    setAlignToTop(nativeEvent.lines.length >= 2);\n  };\n  var renderDescription = function renderDescription(descriptionColor, description) {\n    return typeof description === 'function' ? description({\n      selectable: false,\n      ellipsizeMode: descriptionEllipsizeMode,\n      color: descriptionColor,\n      fontSize: styles.description.fontSize\n    }) : React.createElement(Text, {\n      selectable: false,\n      numberOfLines: descriptionNumberOfLines,\n      ellipsizeMode: descriptionEllipsizeMode,\n      style: [styles.description, {\n        color: descriptionColor\n      }, descriptionStyle],\n      onTextLayout: onDescriptionTextLayout\n    }, description);\n  };\n  var renderTitle = function renderTitle() {\n    var titleColor = theme.isV3 ? theme.colors.onSurface : color(theme.colors.text).alpha(0.87).rgb().string();\n    return typeof title === 'function' ? title({\n      selectable: false,\n      ellipsizeMode: titleEllipsizeMode,\n      color: titleColor,\n      fontSize: styles.title.fontSize\n    }) : React.createElement(Text, {\n      selectable: false,\n      ellipsizeMode: titleEllipsizeMode,\n      numberOfLines: titleNumberOfLines,\n      style: [styles.title, {\n        color: titleColor\n      }, titleStyle]\n    }, title);\n  };\n  var descriptionColor = theme.isV3 ? theme.colors.onSurfaceVariant : color(theme.colors.text).alpha(0.54).rgb().string();\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    style: [theme.isV3 ? styles.containerV3 : styles.container, style],\n    onPress: onPress\n  }), React.createElement(View, {\n    style: theme.isV3 ? styles.rowV3 : styles.row\n  }, left ? left({\n    color: descriptionColor,\n    style: getLeftStyles(alignToTop, description, theme.isV3)\n  }) : null, React.createElement(View, {\n    style: [theme.isV3 ? styles.itemV3 : styles.item, styles.content]\n  }, renderTitle(), description ? renderDescription(descriptionColor, description) : null), right ? right({\n    color: descriptionColor,\n    style: getRightStyles(alignToTop, description, theme.isV3)\n  }) : null));\n};\nListItem.displayName = 'List.Item';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  containerV3: {\n    paddingVertical: 8,\n    paddingRight: 24\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  rowV3: {\n    flexDirection: 'row',\n    marginVertical: 6\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  itemV3: {\n    paddingLeft: 16\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withInternalTheme(ListItem);","map":{"version":3,"mappings":"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","names":["React","color","withInternalTheme","TouchableRipple","Text","getLeftStyles","getRightStyles","ListItem","_ref","left","right","title","description","onPress","theme","style","titleStyle","titleNumberOfLines","descriptionNumberOfLines","titleEllipsizeMode","descriptionEllipsizeMode","descriptionStyle","rest","useState","alignToTop","setAlignToTop","onDescriptionTextLayout","event","isV3","nativeEvent","lines","length","renderDescription","descriptionColor","selectable","ellipsizeMode","fontSize","styles","numberOfLines","onTextLayout","renderTitle","titleColor","colors","onSurface","text","alpha","rgb","string","onSurfaceVariant","containerV3","container","View","rowV3","row","itemV3","item","content","displayName","StyleSheet","create","padding","paddingVertical","paddingRight","flexDirection","marginVertical","paddingLeft","flex","justifyContent"],"sources":["ListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  FlexAlignType,\n  GestureResponderEvent,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TextLayoutEventData,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type {\n  $RemoveChildren,\n  EllipsizeProp,\n  InternalTheme,\n} from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { getLeftStyles, getRightStyles } from './utils';\n\ntype Title =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ninterface Style {\n  marginLeft?: number;\n  marginRight?: number;\n  marginVertical?: number;\n  alignSelf?: FlexAlignType;\n}\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: Title;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string; style: Style }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { color: string; style?: Style }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const [alignToTop, setAlignToTop] = React.useState(false);\n\n  const onDescriptionTextLayout = (\n    event: NativeSyntheticEvent<TextLayoutEventData>\n  ) => {\n    if (!theme.isV3) {\n      return;\n    }\n    const { nativeEvent } = event;\n    setAlignToTop(nativeEvent.lines.length >= 2);\n  };\n\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n        onTextLayout={onDescriptionTextLayout}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const renderTitle = () => {\n    const titleColor = theme.isV3\n      ? theme.colors.onSurface\n      : color(theme.colors.text).alpha(0.87).rgb().string();\n\n    return typeof title === 'function' ? (\n      title({\n        selectable: false,\n        ellipsizeMode: titleEllipsizeMode,\n        color: titleColor,\n        fontSize: styles.title.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        ellipsizeMode={titleEllipsizeMode}\n        numberOfLines={titleNumberOfLines}\n        style={[styles.title, { color: titleColor }, titleStyle]}\n      >\n        {title}\n      </Text>\n    );\n  };\n\n  const descriptionColor = theme.isV3\n    ? theme.colors.onSurfaceVariant\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[theme.isV3 ? styles.containerV3 : styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={theme.isV3 ? styles.rowV3 : styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: getLeftStyles(alignToTop, description, theme.isV3),\n            })\n          : null}\n        <View\n          style={[theme.isV3 ? styles.itemV3 : styles.item, styles.content]}\n        >\n          {renderTitle()}\n\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: getRightStyles(alignToTop, description, theme.isV3),\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  containerV3: {\n    paddingVertical: 8,\n    paddingRight: 24,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  rowV3: {\n    flexDirection: 'row',\n    marginVertical: 6,\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  itemV3: {\n    paddingLeft: 16,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withInternalTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}