{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"size\", \"style\", \"theme\"],\n  _excluded2 = [\"backgroundColor\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport getContrastingColor from \"../../utils/getContrastingColor\";\nimport Icon from \"../Icon\";\nvar defaultSize = 64;\nvar Avatar = function Avatar(_ref) {\n  var _theme$colors, _rest$color;\n  var icon = _ref.icon,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? defaultSize : _ref$size,\n    style = _ref.style,\n    theme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary : _ref2$backgroundColor,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  var textColor = (_rest$color = rest.color) !== null && _rest$color !== void 0 ? _rest$color : getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  return React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(Icon, {\n    source: icon,\n    color: textColor,\n    size: size * 0.6\n  }));\n};\nAvatar.displayName = 'Avatar.Icon';\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withInternalTheme(Avatar);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAG9B,SAASC,iBAAiB;AAC1B,SAASC,KAAK;AAEd,OAAOC,mBAAmB;AAC1B,OAAOC,IAAI;AAEX,IAAMC,WAAW,GAAG,EAAE;AAyCtB,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAGC,MAAgE;EAAA;EAAA,IAA7DC,IAAI,GAAoDD,KAAxDC,IAAI;IAAA,YAAoDD,KAAlDE,IAAI;IAAJA,IAAI,0BAAGJ,WAAW;IAAEK,KAAK,GAAyBH,KAA9BG,KAAK;IAAEC,KAAK,GAAkBJ,KAAvBI,KAAK;IAAKC,gCAAaL;EACxE,YACEM,UAAU,CAACC,OAAO,CAACJ,KAAK,CAAC,IAAI,CAAC,CAAC;IAAA,8BADzBK,eAAe;IAAfA,eAAe,uDAAGJ,KAAK,CAACK,MAAM,kDAAZC,cAAcC,OAAO;IAAKC;EAEpD,IAAMC,SAAS,kBACbR,IAAI,CAACS,KAAK,qDACVlB,mBAAmB,CAACY,eAAe,EAAEb,KAAK,EAAE,oBAAoB,CAAC;EAEnE,OACEF,oBAACsB,IAAI;IACHZ,KAAK,EAAE,CACL;MACEa,KAAK,EAAEd,IAAI;MACXe,MAAM,EAAEf,IAAI;MACZgB,YAAY,EAAEhB,IAAI,GAAG,CAAC;MACtBM;IACF,CAAC,EACDW,MAAM,CAACC,SAAS,EAChBR,SAAS;EACT,GACEP,IAAI,GAERZ,oBAACI,IAAI;IAACwB,MAAM,EAAEpB,IAAK;IAACa,KAAK,EAAED,SAAU;IAACX,IAAI,EAAEA,IAAI,GAAG;EAAI,EAAG,CACrD;AAEX,CAAC;AAEDH,MAAM,CAACuB,WAAW,GAAG,aAAa;AAElC,IAAMH,MAAM,GAAGb,UAAU,CAACiB,MAAM,CAAC;EAC/BH,SAAS,EAAE;IACTI,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAe/B,iBAAiB,CAACK,MAAM,CAAC","names":["React","withInternalTheme","white","getContrastingColor","Icon","defaultSize","Avatar","_ref","icon","size","style","theme","rest","StyleSheet","flatten","backgroundColor","colors","_theme$colors","primary","restStyle","textColor","color","View","width","height","borderRadius","styles","container","source","displayName","create","justifyContent","alignItems"],"sources":["AvatarIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Icon, { IconSource } from '../Icon';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Icon to display for the `Avatar`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\nconst Avatar = ({ icon, size = defaultSize, style, theme, ...rest }: Props) => {\n  const { backgroundColor = theme.colors?.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    rest.color ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Icon source={icon} color={textColor} size={size * 0.6} />\n    </View>\n  );\n};\n\nAvatar.displayName = 'Avatar.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withInternalTheme(Avatar);\n"]},"metadata":{},"sourceType":"module"}