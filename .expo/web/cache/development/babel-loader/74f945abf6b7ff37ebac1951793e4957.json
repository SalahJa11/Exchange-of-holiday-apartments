{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"indeterminate\", \"style\", \"progress\", \"visible\", \"theme\", \"animatedValue\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport setColor from 'color';\nimport { withInternalTheme } from \"../core/theming\";\nvar INDETERMINATE_DURATION = 2000;\nvar INDETERMINATE_MAX_WIDTH = 0.6;\nvar isRTL = I18nManager.isRTL;\nvar ProgressBar = function ProgressBar(_ref) {\n  var _theme$colors;\n  var color = _ref.color,\n    indeterminate = _ref.indeterminate,\n    style = _ref.style,\n    _ref$progress = _ref.progress,\n    progress = _ref$progress === void 0 ? 0 : _ref$progress,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? true : _ref$visible,\n    theme = _ref.theme,\n    animatedValue = _ref.animatedValue,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(0)),\n    timer = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(0)),\n    fade = _React$useRef2.current;\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    width = _React$useState2[0],\n    setWidth = _React$useState2[1];\n  var _React$useState3 = React.useState(0),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    prevWidth = _React$useState4[0],\n    setPrevWidth = _React$useState4[1];\n  var indeterminateAnimation = React.useRef(null);\n  var scale = theme.animation.scale;\n  var startAnimation = React.useCallback(function () {\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false\n    }).start();\n    if (animatedValue && animatedValue >= 0) {\n      return;\n    }\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false\n        });\n      }\n      timer.setValue(0);\n      Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n    }\n  }, [fade, scale, indeterminate, timer, progress]);\n  var stopAnimation = React.useCallback(function () {\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false\n    }).start();\n  }, [fade, scale]);\n  React.useEffect(function () {\n    if (visible) startAnimation();else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n  React.useEffect(function () {\n    if (animatedValue && animatedValue >= 0) {\n      timer.setValue(animatedValue);\n    }\n  }, [animatedValue, timer]);\n  React.useEffect(function () {\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n  var onLayout = function onLayout(event) {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n  var tintColor = color || ((_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary);\n  var trackTintColor = theme.isV3 ? theme.colors.surfaceVariant : setColor(tintColor).alpha(0.38).rgb().string();\n  return React.createElement(View, _extends({\n    onLayout: onLayout\n  }, rest, {\n    accessible: true,\n    accessibilityRole: \"progressbar\",\n    accessibilityState: {\n      busy: visible\n    },\n    accessibilityValue: indeterminate ? {} : {\n      min: 0,\n      max: 100,\n      now: progress * 100\n    }\n  }), React.createElement(Animated.View, {\n    style: [styles.container, {\n      backgroundColor: trackTintColor,\n      opacity: fade\n    }, style]\n  }, width ? React.createElement(Animated.View, {\n    style: [styles.progressBar, {\n      width: width,\n      backgroundColor: tintColor,\n      transform: [{\n        translateX: timer.interpolate(indeterminate ? {\n          inputRange: [0, 0.5, 1],\n          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL ? -1 : 1) * 0.7 * width]\n        } : {\n          inputRange: [0, 1],\n          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0]\n        })\n      }, {\n        scaleX: timer.interpolate(indeterminate ? {\n          inputRange: [0, 0.5, 1],\n          outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]\n        } : {\n          inputRange: [0, 1],\n          outputRange: [0.0001, 1]\n        })\n      }]\n    }]\n  }) : null));\n};\nvar styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden'\n  },\n  progressBar: {\n    flex: 1\n  }\n});\nexport default withInternalTheme(ProgressBar);","map":{"version":3,"mappings":"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","names":["React","setColor","withInternalTheme","INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","I18nManager","ProgressBar","_ref","color","indeterminate","style","progress","visible","theme","animatedValue","rest","useRef","Animated","Value","timer","current","fade","useState","width","setWidth","prevWidth","setPrevWidth","indeterminateAnimation","scale","animation","startAnimation","useCallback","timing","duration","toValue","useNativeDriver","isInteraction","start","Platform","OS","setValue","loop","stopAnimation","stop","useEffect","onLayout","event","nativeEvent","layout","tintColor","colors","_theme$colors","primary","trackTintColor","isV3","surfaceVariant","alpha","rgb","string","View","accessible","accessibilityRole","accessibilityState","busy","accessibilityValue","min","max","now","styles","container","backgroundColor","opacity","progressBar","transform","translateX","interpolate","inputRange","outputRange","scaleX","StyleSheet","create","height","overflow","flex"],"sources":["ProgressBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  I18nManager,\n  LayoutChangeEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport setColor from 'color';\n\nimport { withInternalTheme } from '../core/theming';\nimport type { InternalTheme } from '../types';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Animated value (between 0 and 1). This tells the progress bar to rely on this value to animate it.\n   * Note: It should not be used in parallel with the `progress` prop.\n   */\n  animatedValue?: number;\n  /**\n   * Progress value (between 0 and 1).\n   * Note: It should not be used in parallel with the `animatedValue` prop.\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={MD3Colors.error50} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ProgressBar = ({\n  color,\n  indeterminate,\n  style,\n  progress = 0,\n  visible = true,\n  theme,\n  animatedValue,\n  ...rest\n}: Props) => {\n  const { current: timer } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(0));\n  const [width, setWidth] = React.useState<number>(0);\n  const [prevWidth, setPrevWidth] = React.useState<number>(0);\n\n  const indeterminateAnimation =\n    React.useRef<Animated.CompositeAnimation | null>(null);\n\n  const { scale } = theme.animation;\n\n  const startAnimation = React.useCallback(() => {\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    if (animatedValue && animatedValue >= 0) {\n      return;\n    }\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n    /**\n     * We shouldn't add @param animatedValue to the\n     * deps array, to avoid the unnecessary loop.\n     * We can only check if the prop is passed initially,\n     * and we do early return.\n     */\n  }, [fade, scale, indeterminate, timer, progress]);\n\n  const stopAnimation = React.useCallback(() => {\n    // Stop indeterminate animation\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  }, [fade, scale]);\n\n  React.useEffect(() => {\n    if (visible) startAnimation();\n    else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n\n  React.useEffect(() => {\n    if (animatedValue && animatedValue >= 0) {\n      timer.setValue(animatedValue);\n    }\n  }, [animatedValue, timer]);\n\n  React.useEffect(() => {\n    // Start animation the very first time when previously the width was unclear\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n\n  const onLayout = (event: LayoutChangeEvent) => {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n\n  const tintColor = color || theme.colors?.primary;\n  const trackTintColor = theme.isV3\n    ? theme.colors.surfaceVariant\n    : setColor(tintColor).alpha(0.38).rgb().string();\n\n  return (\n    <View\n      onLayout={onLayout}\n      {...rest}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityState={{ busy: visible }}\n      accessibilityValue={\n        indeterminate ? {} : { min: 0, max: 100, now: progress * 100 }\n      }\n    >\n      <Animated.View\n        style={[\n          styles.container,\n          { backgroundColor: trackTintColor, opacity: fade },\n          style,\n        ]}\n      >\n        {width ? (\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                width,\n                backgroundColor: tintColor,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              (isRTL ? 1 : -1) * 0.5 * width,\n                              (isRTL ? 1 : -1) *\n                                0.5 *\n                                INDETERMINATE_MAX_WIDTH *\n                                width,\n                              (isRTL ? -1 : 1) * 0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        ) : null}\n      </Animated.View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withInternalTheme(ProgressBar);\n"]},"metadata":{},"sourceType":"module"}