{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport color from 'color';\nimport { withInternalTheme } from \"../../../core/theming\";\nimport { getConstants } from \"../helpers\";\nimport { AdornmentSide } from \"./enums\";\nvar AffixContext = React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n    side = _ref.side,\n    textStyle = _ref.textStyle,\n    topPosition = _ref.topPosition,\n    onLayout = _ref.onLayout,\n    visible = _ref.visible,\n    paddingHorizontal = _ref.paddingHorizontal,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,\n    testID = _ref.testID;\n  return React.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal,\n      maxFontSizeMultiplier: maxFontSizeMultiplier,\n      testID: testID\n    }\n  }, affix);\n};\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var _theme$colors;\n  var text = _ref2.text,\n    labelStyle = _ref2.textStyle,\n    theme = _ref2.theme;\n  var _getConstants = getConstants(theme.isV3),\n    AFFIX_OFFSET = _getConstants.AFFIX_OFFSET;\n  var _React$useContext = React.useContext(AffixContext),\n    textStyle = _React$useContext.textStyle,\n    onLayout = _React$useContext.onLayout,\n    topPosition = _React$useContext.topPosition,\n    side = _React$useContext.side,\n    visible = _React$useContext.visible,\n    paddingHorizontal = _React$useContext.paddingHorizontal,\n    maxFontSizeMultiplier = _React$useContext.maxFontSizeMultiplier,\n    testID = _React$useContext.testID;\n  var textColor = color(theme.isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, offset);\n  return React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout,\n    testID: testID\n  }, React.createElement(Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withInternalTheme(TextInputAffix);\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAAA;AAAA;AAWzB,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,iBAAiB;AAE1B,SAASC,YAAY;AACrB,SAASC,aAAa;AA6BtB,IAAMC,YAAY,GAAGL,KAAK,CAACM,aAAa,CAAe;EACrDC,SAAS,EAAE;IAAEC,UAAU,EAAE,EAAE;IAAEP,KAAK,EAAE;EAAG,CAAC;EACxCQ,WAAW,EAAE,IAAI;EACjBC,IAAI,EAAEN,aAAa,CAACO;AACtB,CAAC,CAAC;AAEF,IAAMC,cAKL,GAAG,SALEA,cAKL,CAAGC,MAUE;EAAA,IATJC,KAAK,GASND,KATCC,KAAK;IACLJ,IAAI,GAQLG,KARCH,IAAI;IACJH,SAAS,GAOVM,KAPCN,SAAS;IACTE,WAAW,GAMZI,KANCJ,WAAW;IACXM,QAAQ,GAKTF,KALCE,QAAQ;IACRC,OAAO,GAIRH,KAJCG,OAAO;IACPC,iBAAiB,GAGlBJ,KAHCI,iBAAiB;IACjBC,qBAAqB,GAEtBL,KAFCK,qBAAqB;IACrBC,SACDN,KADCM;EAEA,OACEnB,oBAACK,YAAY,CAACe,QAAQ;IACpBC,KAAK,EAAE;MACLX,IAAI,EAAJA,IAAI;MACJH,SAAS,EAATA,SAAS;MACTE,WAAW,EAAXA,WAAW;MACXM,QAAQ,EAARA,QAAQ;MACRC,OAAO,EAAPA,OAAO;MACPC,iBAAiB,EAAjBA,iBAAiB;MACjBC,qBAAqB,EAArBA,qBAAqB;MACrBC;IACF;EAAE,GAEDL,KAAK,CACgB;AAE5B,CAAC;AAiCD,IAAMQ,cAAc,GAAG,SAAjBA,cAAc,CAAGC,OAAmD;EAAA;EAAA,IAAhDC,IAAI,GAAuCD,MAA3CC,IAAI;IAAaC,UAAU,GAAgBF,MAArChB,SAAS;IAAcmB,QAAcH,MAAdG;EACrD,oBAAyBvB,YAAY,CAACuB,KAAK,CAACC,IAAI,CAAC;IAAzCC;EAER,wBASI5B,KAAK,CAAC6B,UAAU,CAACxB,YAAY,CAAC;IARhCE,SAAS,qBAATA,SAAS;IACTQ,QAAQ,qBAARA,QAAQ;IACRN,WAAW,qBAAXA,WAAW;IACXC,IAAI,qBAAJA,IAAI;IACJM,OAAO,qBAAPA,OAAO;IACPC,iBAAiB,qBAAjBA,iBAAiB;IACjBC,qBAAqB,qBAArBA,qBAAqB;IACrBC;EAGF,IAAMW,SAAS,GAAG7B,KAAK,CACrByB,KAAK,CAACC,IAAI,GAAGD,KAAK,CAACK,MAAM,CAACC,SAAS,oBAAGN,KAAK,CAACK,MAAM,kDAAZE,cAAcT,IAAI,CACzD,CACEU,KAAK,CAACR,KAAK,CAACS,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,CAC9BC,GAAG,EAAE,CACLC,MAAM,EAAE;EAEX,IAAMC,MAAM,GACV,OAAOrB,iBAAiB,KAAK,QAAQ,GAAGA,iBAAiB,GAAGW,YAAY;EAE1E,IAAMW,KAAK;IACTC,GAAG,EAAE/B;EAAW,GACfC,IAAI,EAAG4B,OACI;EAEd,OACEtC,oBAACyC,QAAQ,CAACC,IAAI;IACZH,KAAK,EAAE,CACLI,MAAM,CAACC,SAAS,EAChBL,KAAK,EACL;MACEM,OAAO,EACL,QAAO,aAAP7B,OAAO,uBAAPA,OAAO,CAAE8B,WAAW,CAAC;QACnBC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAClBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC;MACpB,CAAC,CAAC,KAAI;IACV,CAAC,CACD;IACFjC,QAAQ,EAAEA,QAAS;IACnBI,MAAM,EAAEA;EAAO,GAEfnB,oBAACiD,IAAI;IACH/B,qBAAqB,EAAEA,qBAAsB;IAC7CqB,KAAK,EAAE,CAAC;MAAEtC,KAAK,EAAE6B;IAAU,CAAC,EAAEvB,SAAS,EAAEkB,UAAU;EAAE,GAEpDD,IAAI,CACA,CACO;AAEpB,CAAC;AACDF,cAAc,CAAC4B,WAAW,GAAG,iBAAiB;AAE9C,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAM,CAAC;EAC/BR,SAAS,EAAE;IACTS,QAAQ,EAAE,UAAU;IACpBC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAerD,iBAAiB,CAACoB,cAAc,CAAC;AAGhD,SAASA,cAAc,EAAEV,cAAc","names":["React","color","withInternalTheme","getConstants","AdornmentSide","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","_ref","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","testID","Provider","value","TextInputAffix","_ref2","text","labelStyle","theme","isV3","AFFIX_OFFSET","useContext","textColor","colors","onSurface","_theme$colors","alpha","dark","rgb","string","offset","style","top","Animated","View","styles","container","opacity","interpolate","inputRange","outputRange","Text","displayName","StyleSheet","create","position","justifyContent","alignItems"],"sources":["TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../../core/theming';\nimport type { InternalTheme } from '../../../types';\nimport { getConstants } from '../helpers';\nimport { AdornmentSide } from './enums';\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n  testID?: string;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n  testID,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n        testID,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const { AFFIX_OFFSET } = getConstants(theme.isV3);\n\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    testID,\n  } = React.useContext(AffixContext);\n\n  const textColor = color(\n    theme.isV3 ? theme.colors.onSurface : theme.colors?.text\n  )\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n      testID={testID}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withInternalTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}