{"ast":null,"code":"import * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport default function useIsKeyboardShown(_ref) {\n  var onShow = _ref.onShow,\n    onHide = _ref.onHide;\n  React.useEffect(function () {\n    var willShowSubscription;\n    var willHideSubscription;\n    var didShowSubscription;\n    var didHideSubscription;\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n    return function () {\n      if (Platform.OS === 'ios') {\n        var _willShowSubscription, _willHideSubscription;\n        if ((_willShowSubscription = willShowSubscription) !== null && _willShowSubscription !== void 0 && _willShowSubscription.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n        if ((_willHideSubscription = willHideSubscription) !== null && _willHideSubscription !== void 0 && _willHideSubscription.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        var _didShowSubscription, _didHideSubscription;\n        if ((_didShowSubscription = didShowSubscription) !== null && _didShowSubscription !== void 0 && _didShowSubscription.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n        if ((_didHideSubscription = didHideSubscription) !== null && _didHideSubscription !== void 0 && _didHideSubscription.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAO9B,eAAe,SAASC,kBAAkB,OAA4B;EAAA,IAAzBC,MAAM,GAAiBC,KAAvBD,MAAM;IAAEE,SAAeD,KAAfC;EACnDJ,KAAK,CAACK,SAAS,CAAC,YAAM;IACpB,IAAIC,oBAAyD;IAC7D,IAAIC,oBAAyD;IAC7D,IAAIC,mBAAwD;IAC5D,IAAIC,mBAAwD;IAE5D,IAAIC,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;MACzBL,oBAAoB,GAAGM,QAAQ,CAACC,WAAW,CAAC,kBAAkB,EAAEX,MAAM,CAAC;MACvEK,oBAAoB,GAAGK,QAAQ,CAACC,WAAW,CAAC,kBAAkB,EAAET,MAAM,CAAC;IACzE,CAAC,MAAM;MACLI,mBAAmB,GAAGI,QAAQ,CAACC,WAAW,CAAC,iBAAiB,EAAEX,MAAM,CAAC;MACrEO,mBAAmB,GAAGG,QAAQ,CAACC,WAAW,CAAC,iBAAiB,EAAET,MAAM,CAAC;IACvE;IAEA,OAAO,YAAM;MACX,IAAIM,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;QAAA;QACzB,6BAAIL,oBAAoB,kDAApBQ,sBAAsBC,MAAM,EAAE;UAChCT,oBAAoB,CAACS,MAAM,EAAE;QAC/B,CAAC,MAAM;UAELH,QAAQ,CAACI,cAAc,CAAC,kBAAkB,EAAEd,MAAM,CAAC;QACrD;QAEA,6BAAIK,oBAAoB,kDAApBU,sBAAsBF,MAAM,EAAE;UAChCR,oBAAoB,CAACQ,MAAM,EAAE;QAC/B,CAAC,MAAM;UAELH,QAAQ,CAACI,cAAc,CAAC,kBAAkB,EAAEZ,MAAM,CAAC;QACrD;MACF,CAAC,MAAM;QAAA;QACL,4BAAII,mBAAmB,iDAAnBU,qBAAqBH,MAAM,EAAE;UAC/BP,mBAAmB,CAACO,MAAM,EAAE;QAC9B,CAAC,MAAM;UAELH,QAAQ,CAACI,cAAc,CAAC,iBAAiB,EAAEd,MAAM,CAAC;QACpD;QAEA,4BAAIO,mBAAmB,iDAAnBU,qBAAqBJ,MAAM,EAAE;UAC/BN,mBAAmB,CAACM,MAAM,EAAE;QAC9B,CAAC,MAAM;UAELH,QAAQ,CAACI,cAAc,CAAC,iBAAiB,EAAEZ,MAAM,CAAC;QACpD;MACF;IACF,CAAC;EACH,CAAC,EAAE,CAACA,MAAM,EAAEF,MAAM,CAAC,CAAC;AACtB","names":["React","useIsKeyboardShown","onShow","_ref","onHide","useEffect","willShowSubscription","willHideSubscription","didShowSubscription","didHideSubscription","Platform","OS","Keyboard","addListener","_willShowSubscription","remove","removeListener","_willHideSubscription","_didShowSubscription","_didHideSubscription"],"sources":["useIsKeyboardShown.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Keyboard, NativeEventSubscription, Platform } from 'react-native';\n\ntype Props = {\n  onShow: () => void;\n  onHide: () => void;\n};\nexport default function useIsKeyboardShown({ onShow, onHide }: Props) {\n  React.useEffect(() => {\n    let willShowSubscription: NativeEventSubscription | undefined;\n    let willHideSubscription: NativeEventSubscription | undefined;\n    let didShowSubscription: NativeEventSubscription | undefined;\n    let didHideSubscription: NativeEventSubscription | undefined;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        if (willShowSubscription?.remove) {\n          willShowSubscription.remove();\n        } else {\n          // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if (willHideSubscription?.remove) {\n          willHideSubscription.remove();\n        } else {\n          // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        if (didShowSubscription?.remove) {\n          didShowSubscription.remove();\n        } else {\n          // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if (didHideSubscription?.remove) {\n          didHideSubscription.remove();\n        } else {\n          // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}\n"]},"metadata":{},"sourceType":"module"}