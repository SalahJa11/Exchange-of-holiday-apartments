{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"alpha\", \"family\", \"style\", \"theme\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { useInternalTheme } from \"../../../core/theming\";\nimport Text from \"./Text\";\nvar StyledText = function StyledText(_ref) {\n  var _theme$colors, _theme$fonts;\n  var _ref$alpha = _ref.alpha,\n    alpha = _ref$alpha === void 0 ? 1 : _ref$alpha,\n    family = _ref.family,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var textColor = color(theme.isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.text).alpha(alpha).rgb().string();\n  var writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n  return React.createElement(Text, _extends({}, rest, {\n    style: [styles.text, _objectSpread(_objectSpread({\n      color: textColor\n    }, !theme.isV3 && ((_theme$fonts = theme.fonts) === null || _theme$fonts === void 0 ? void 0 : _theme$fonts[family])), {}, {\n      writingDirection: writingDirection\n    }), style]\n  }));\n};\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default StyledText;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAG9B,OAAOC,KAAK,MAAM,OAAO;AAGzB,SAASC,gBAAgB;AACzB,OAAOC,IAAI;AASX,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAGC,MAMN;EAAA;EAAA,iBAALA,KALNC,KAAK;IAALA,KAAK,2BAAG,CAAC;IACTC,MAAM,GAIAF,KAJNE,MAAM;IACNC,KAAK,GAGCH,KAHNG,KAAK;IACEC,cAAc,GAEfJ,KAFNK,KAAK;IACFC,gCACGN;EACN,IAAMK,KAAK,GAAGR,gBAAgB,CAACO,cAAc,CAAC;EAE9C,IAAMG,SAAS,GAAGX,KAAK,CACrBS,KAAK,CAACG,IAAI,GAAGH,KAAK,CAACI,MAAM,CAACC,SAAS,oBAAGL,KAAK,CAACI,MAAM,kDAAZE,cAAcC,IAAI,CACzD,CACEX,KAAK,CAACA,KAAK,CAAC,CACZY,GAAG,EAAE,CACLC,MAAM,EAAE;EACX,IAAMC,gBAAgB,GAAGC,WAAW,CAACC,YAAY,EAAE,CAACC,KAAK,GAAG,KAAK,GAAG,KAAK;EAEzE,OACEvB,oBAACG,IAAI,eACCQ,IAAI;IACRH,KAAK,EAAE,CACLgB,MAAM,CAACP,IAAI;MAEThB,KAAK,EAAEW;IAAS,GACZ,CAACF,KAAK,CAACG,IAAI,qBAAIH,KAAK,CAACe,KAAK,iDAAXC,aAAcnB,MAAM,CAAC;MACxCa;IAAAA,IAEFZ,KAAK;EACL,GACF;AAEN,CAAC;AAED,IAAMgB,MAAM,GAAGG,UAAU,CAACC,MAAM,CAAC;EAC/BX,IAAI,EAAE;IACJY,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAezB,UAAU","names":["React","color","useInternalTheme","Text","StyledText","_ref","alpha","family","style","themeOverrides","theme","rest","textColor","isV3","colors","onSurface","_theme$colors","text","rgb","string","writingDirection","I18nManager","getConstants","isRTL","styles","fonts","_theme$fonts","StyleSheet","create","textAlign"],"sources":["StyledText.tsx"],"sourcesContent":["import * as React from 'react';\nimport { I18nManager, StyleProp, StyleSheet, TextStyle } from 'react-native';\n\nimport color from 'color';\nimport type { ThemeProp } from 'src/types';\n\nimport { useInternalTheme } from '../../../core/theming';\nimport Text from './Text';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  alpha?: number;\n  family: 'regular' | 'medium' | 'light' | 'thin';\n  style?: StyleProp<TextStyle>;\n  theme?: ThemeProp;\n};\n\nconst StyledText = ({\n  alpha = 1,\n  family,\n  style,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  const textColor = color(\n    theme.isV3 ? theme.colors.onSurface : theme.colors?.text\n  )\n    .alpha(alpha)\n    .rgb()\n    .string();\n  const writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n\n  return (\n    <Text\n      {...rest}\n      style={[\n        styles.text,\n        {\n          color: textColor,\n          ...(!theme.isV3 && theme.fonts?.[family]),\n          writingDirection,\n        },\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default StyledText;\n"]},"metadata":{},"sourceType":"module"}