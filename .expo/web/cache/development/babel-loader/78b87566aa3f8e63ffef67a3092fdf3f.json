{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { createTheming } from '@callstack/react-theme-provider';\nimport color from 'color';\nimport { MD2DarkTheme, MD2LightTheme, MD3DarkTheme, MD3LightTheme } from \"../styles/themes\";\nexport var DefaultTheme = MD3LightTheme;\nvar _createTheming = createTheming(MD3LightTheme),\n  ThemeProvider = _createTheming.ThemeProvider,\n  withTheme = _createTheming.withTheme,\n  useAppTheme = _createTheming.useTheme;\nexport { ThemeProvider, withTheme, useAppTheme };\nexport function useTheme(overrides) {\n  return useAppTheme(overrides);\n}\nexport var useInternalTheme = function useInternalTheme(themeOverrides) {\n  return useAppTheme(themeOverrides);\n};\nexport var withInternalTheme = function withInternalTheme(WrappedComponent) {\n  return withTheme(WrappedComponent);\n};\nexport var defaultThemesByVersion = {\n  2: {\n    light: MD2LightTheme,\n    dark: MD2DarkTheme\n  },\n  3: {\n    light: MD3LightTheme,\n    dark: MD3DarkTheme\n  }\n};\nexport var getTheme = function getTheme() {\n  var isDark = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var isV3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var themeVersion = isV3 ? 3 : 2;\n  var scheme = isDark ? 'dark' : 'light';\n  return defaultThemesByVersion[themeVersion][scheme];\n};\nexport function adaptNavigationTheme(themes) {\n  var reactNavigationLight = themes.reactNavigationLight,\n    reactNavigationDark = themes.reactNavigationDark,\n    materialLight = themes.materialLight,\n    materialDark = themes.materialDark;\n  var getAdaptedTheme = function getAdaptedTheme(navigationTheme, MD3Theme) {\n    return _objectSpread(_objectSpread({}, navigationTheme), {}, {\n      colors: _objectSpread(_objectSpread({}, navigationTheme.colors), {}, {\n        primary: MD3Theme.colors.primary,\n        background: MD3Theme.colors.background,\n        card: MD3Theme.colors.elevation.level2,\n        text: MD3Theme.colors.onSurface,\n        border: MD3Theme.colors.outline,\n        notification: MD3Theme.colors.error\n      })\n    });\n  };\n  var MD3Themes = {\n    light: materialLight || MD3LightTheme,\n    dark: materialDark || MD3DarkTheme\n  };\n  if (reactNavigationLight && reactNavigationDark) {\n    var modes = ['light', 'dark'];\n    var NavigationThemes = {\n      light: reactNavigationLight,\n      dark: reactNavigationDark\n    };\n    var _modes$reduce = modes.reduce(function (prev, curr) {\n        return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, curr, getAdaptedTheme(NavigationThemes[curr], MD3Themes[curr])));\n      }, {\n        light: reactNavigationLight,\n        dark: reactNavigationDark\n      }),\n      adaptedLight = _modes$reduce.light,\n      adaptedDark = _modes$reduce.dark;\n    return {\n      LightTheme: adaptedLight,\n      DarkTheme: adaptedDark\n    };\n  }\n  if (reactNavigationDark) {\n    return {\n      DarkTheme: getAdaptedTheme(reactNavigationDark, MD3Themes.dark)\n    };\n  }\n  return {\n    LightTheme: getAdaptedTheme(reactNavigationLight, MD3Themes.light)\n  };\n}\nexport var getDynamicThemeElevations = function getDynamicThemeElevations(scheme) {\n  var elevationValues = ['transparent', 0.05, 0.08, 0.11, 0.12, 0.14];\n  return elevationValues.reduce(function (elevations, elevationValue, index) {\n    return _objectSpread(_objectSpread({}, elevations), {}, _defineProperty({}, \"level\" + index, index === 0 ? elevationValue : color(scheme.surface).mix(color(scheme.primary), elevationValue).rgb().string()));\n  }, {});\n};","map":{"version":3,"mappings":";;;AAEA,SAAuBA,aAAa,QAAQ,iCAAiC;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAEzB,SACEC,YAAY,EACZC,aAAa,EACbC,YAAY,EACZC,aAAa;AASf,OAAO,IAAMC,YAAY,GAAGD,aAAa;AAElC,qBAIHL,aAAa,CAAUK,aAAa,CAAC;EAHvCE,aAAa,kBAAbA,aAAa;EACbC,SAAS,kBAATA,SAAS;EACCC,6BAAVC,QAAQ;AAC+B;AAEzC,OAAO,SAASA,QAAQ,CAAeC,SAA2B,EAAE;EAClE,OAAOF,WAAW,CAAIE,SAAS,CAAC;AAClC;AAEA,OAAO,IAAMC,gBAAgB,GAC3BC,SADWD,gBAAgB,CAC3BC,cAA4C;EAAA,OACzCJ,WAAW,CAAgBI,cAAc,CAAC;AAAA;AAE/C,OAAO,IAAMC,iBAAiB,GAC5BC,SADWD,iBAAiB,CAC5BC,gBAAqE;EAAA,OAClEP,SAAS,CAAWO,gBAAgB,CAAC;AAAA;AAE1C,OAAO,IAAMC,sBAAsB,GAAG;EACpC,CAAC,EAAE;IACDC,KAAK,EAAEd,aAAa;IACpBe,IAAI,EAAEhB;EACR,CAAC;EACD,CAAC,EAAE;IACDe,KAAK,EAAEZ,aAAa;IACpBa,IAAI,EAAEd;EACR;AACF,CAAC;AAED,OAAO,IAAMe,QAAQ,GAAG,SAAXA,QAAQ,GAAoC;EAAA,IAAhCC,MAAM,uEAAG,KAAK;EAAA,IAAEC,IAAI,uEAAG,IAAI;EAClD,IAAMC,YAAY,GAAGD,IAAI,GAAG,CAAC,GAAG,CAAC;EACjC,IAAME,MAAM,GAAGH,MAAM,GAAG,MAAM,GAAG,OAAO;EAExC,OAAOJ,sBAAsB,CAACM,YAAY,CAAC,CAACC,MAAM,CAAC;AACrD,CAAC;AAwBD,OAAO,SAASC,oBAAoB,CAACC,MAAW,EAAE;EAChD,IACEC,oBAAoB,GAIlBD,MAAM,CAJRC,oBAAoB;IACpBC,mBAAmB,GAGjBF,MAAM,CAHRE,mBAAmB;IACnBC,aAAa,GAEXH,MAAM,CAFRG,aAAa;IACbC,eACEJ,MAAM,CADRI;EAGF,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CACnBC,eAAgC,EAChCC,QAAkB,EACf;IACH,uCACKD,eAAe;MAClBE,MAAM,kCACDF,eAAe,CAACE,MAAM;QACzBC,OAAO,EAAEF,QAAQ,CAACC,MAAM,CAACC,OAAO;QAChCC,UAAU,EAAEH,QAAQ,CAACC,MAAM,CAACE,UAAU;QACtCC,IAAI,EAAEJ,QAAQ,CAACC,MAAM,CAACI,SAAS,CAACC,MAAM;QACtCC,IAAI,EAAEP,QAAQ,CAACC,MAAM,CAACO,SAAS;QAC/BC,MAAM,EAAET,QAAQ,CAACC,MAAM,CAACS,OAAO;QAC/BC,YAAY,EAAEX,QAAQ,CAACC,MAAM,CAACW;MAAAA;IAChC;EAEJ,CAAC;EAED,IAAMC,SAAS,GAAG;IAChB5B,KAAK,EAAEW,aAAa,IAAIvB,aAAa;IACrCa,IAAI,EAAEW,YAAY,IAAIzB;EACxB,CAAC;EAED,IAAIsB,oBAAoB,IAAIC,mBAAmB,EAAE;IAC/C,IAAMmB,KAAK,GAAG,CAAC,OAAO,EAAE,MAAM,CAAU;IAExC,IAAMC,gBAAgB,GAAG;MACvB9B,KAAK,EAAES,oBAAoB;MAC3BR,IAAI,EAAES;IACR,CAAC;IAED,oBAAmDmB,KAAK,CAACE,MAAM,CAC7D,UAACC,IAAI,EAAEC,IAAI,EAAK;QACd,uCACKD,IAAI,2BACNC,IAAI,EAAGpB,eAAe,CAACiB,gBAAgB,CAACG,IAAI,CAAC,EAAEL,SAAS,CAACK,IAAI,CAAC;MAEnE,CAAC,EACD;QACEjC,KAAK,EAAES,oBAAoB;QAC3BR,IAAI,EAAES;MACR,CAAC,CACF;MAXcwB,YAAY,iBAAnBlC,KAAK;MAAsBmC,4BAANlC,IAAI;IAajC,OAAO;MACLmC,UAAU,EAAEF,YAAY;MACxBG,SAAS,EAAEF;IACb,CAAC;EACH;EAEA,IAAIzB,mBAAmB,EAAE;IACvB,OAAO;MACL2B,SAAS,EAAExB,eAAe,CAACH,mBAAmB,EAAEkB,SAAS,CAAC3B,IAAI;IAChE,CAAC;EACH;EAEA,OAAO;IACLmC,UAAU,EAAEvB,eAAe,CAACJ,oBAAoB,EAAEmB,SAAS,CAAC5B,KAAK;EACnE,CAAC;AACH;AAEA,OAAO,IAAMsC,yBAAyB,GAAIhC,SAA7BgC,yBAAyB,CAAIhC,MAAwB,EAAK;EACrE,IAAMiC,eAAe,GAAG,CAAC,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACrE,OAAOA,eAAe,CAACR,MAAM,CAAC,UAACS,UAAU,EAAEC,cAAc,EAAEC,KAAK,EAAK;IACnE,uCACKF,UAAU,qCACJE,KAAM,EACbA,KAAK,KAAK,CAAC,GACPD,cAAc,GACdzD,KAAK,CAACsB,MAAM,CAACqC,OAAO,CAAC,CAClBC,GAAG,CAAC5D,KAAK,CAACsB,MAAM,CAACW,OAAO,CAAC,EAAEwB,cAAc,CAAW,CACpDI,GAAG,EAAE,CACLC,MAAM;EAEnB,CAAC,EAAE,CAAC,CAAC,CAAC;AACR,CAAC","names":["createTheming","color","MD2DarkTheme","MD2LightTheme","MD3DarkTheme","MD3LightTheme","DefaultTheme","ThemeProvider","withTheme","useAppTheme","useTheme","overrides","useInternalTheme","themeOverrides","withInternalTheme","WrappedComponent","defaultThemesByVersion","light","dark","getTheme","isDark","isV3","themeVersion","scheme","adaptNavigationTheme","themes","reactNavigationLight","reactNavigationDark","materialLight","materialDark","getAdaptedTheme","navigationTheme","MD3Theme","colors","primary","background","card","elevation","level2","text","onSurface","border","outline","notification","error","MD3Themes","modes","NavigationThemes","reduce","prev","curr","adaptedLight","adaptedDark","LightTheme","DarkTheme","getDynamicThemeElevations","elevationValues","elevations","elevationValue","index","surface","mix","rgb","string"],"sources":["theming.tsx"],"sourcesContent":["import type { ComponentType } from 'react';\n\nimport { $DeepPartial, createTheming } from '@callstack/react-theme-provider';\nimport color from 'color';\n\nimport {\n  MD2DarkTheme,\n  MD2LightTheme,\n  MD3DarkTheme,\n  MD3LightTheme,\n} from '../styles/themes';\nimport type {\n  InternalTheme,\n  MD3Theme,\n  MD3AndroidColors,\n  NavigationTheme,\n} from '../types';\n\nexport const DefaultTheme = MD3LightTheme;\n\nexport const {\n  ThemeProvider,\n  withTheme,\n  useTheme: useAppTheme,\n} = createTheming<unknown>(MD3LightTheme);\n\nexport function useTheme<T = MD3Theme>(overrides?: $DeepPartial<T>) {\n  return useAppTheme<T>(overrides);\n}\n\nexport const useInternalTheme = (\n  themeOverrides?: $DeepPartial<InternalTheme>\n) => useAppTheme<InternalTheme>(themeOverrides);\n\nexport const withInternalTheme = <Props extends { theme: InternalTheme }, C>(\n  WrappedComponent: ComponentType<Props & { theme: InternalTheme }> & C\n) => withTheme<Props, C>(WrappedComponent);\n\nexport const defaultThemesByVersion = {\n  2: {\n    light: MD2LightTheme,\n    dark: MD2DarkTheme,\n  },\n  3: {\n    light: MD3LightTheme,\n    dark: MD3DarkTheme,\n  },\n};\n\nexport const getTheme = (isDark = false, isV3 = true) => {\n  const themeVersion = isV3 ? 3 : 2;\n  const scheme = isDark ? 'dark' : 'light';\n\n  return defaultThemesByVersion[themeVersion][scheme];\n};\n\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: {\n  reactNavigationLight: NavigationTheme;\n  materialLight?: MD3Theme;\n}): {\n  LightTheme: NavigationTheme;\n};\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: {\n  reactNavigationDark: NavigationTheme;\n  materialDark?: MD3Theme;\n}): {\n  DarkTheme: NavigationTheme;\n};\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: {\n  reactNavigationLight: NavigationTheme;\n  reactNavigationDark: NavigationTheme;\n  materialLight?: MD3Theme;\n  materialDark?: MD3Theme;\n}): { LightTheme: NavigationTheme; DarkTheme: NavigationTheme };\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: any) {\n  const {\n    reactNavigationLight,\n    reactNavigationDark,\n    materialLight,\n    materialDark,\n  } = themes;\n\n  const getAdaptedTheme = (\n    navigationTheme: NavigationTheme,\n    MD3Theme: MD3Theme\n  ) => {\n    return {\n      ...navigationTheme,\n      colors: {\n        ...navigationTheme.colors,\n        primary: MD3Theme.colors.primary,\n        background: MD3Theme.colors.background,\n        card: MD3Theme.colors.elevation.level2,\n        text: MD3Theme.colors.onSurface,\n        border: MD3Theme.colors.outline,\n        notification: MD3Theme.colors.error,\n      },\n    };\n  };\n\n  const MD3Themes = {\n    light: materialLight || MD3LightTheme,\n    dark: materialDark || MD3DarkTheme,\n  };\n\n  if (reactNavigationLight && reactNavigationDark) {\n    const modes = ['light', 'dark'] as const;\n\n    const NavigationThemes = {\n      light: reactNavigationLight,\n      dark: reactNavigationDark,\n    };\n\n    const { light: adaptedLight, dark: adaptedDark } = modes.reduce(\n      (prev, curr) => {\n        return {\n          ...prev,\n          [curr]: getAdaptedTheme(NavigationThemes[curr], MD3Themes[curr]),\n        };\n      },\n      {\n        light: reactNavigationLight,\n        dark: reactNavigationDark,\n      }\n    );\n\n    return {\n      LightTheme: adaptedLight,\n      DarkTheme: adaptedDark,\n    };\n  }\n\n  if (reactNavigationDark) {\n    return {\n      DarkTheme: getAdaptedTheme(reactNavigationDark, MD3Themes.dark),\n    };\n  }\n\n  return {\n    LightTheme: getAdaptedTheme(reactNavigationLight, MD3Themes.light),\n  };\n}\n\nexport const getDynamicThemeElevations = (scheme: MD3AndroidColors) => {\n  const elevationValues = ['transparent', 0.05, 0.08, 0.11, 0.12, 0.14];\n  return elevationValues.reduce((elevations, elevationValue, index) => {\n    return {\n      ...elevations,\n      [`level${index}`]:\n        index === 0\n          ? elevationValue\n          : color(scheme.surface)\n              .mix(color(scheme.primary), elevationValue as number)\n              .rgb()\n              .string(),\n    };\n  }, {});\n};\n"]},"metadata":{},"sourceType":"module"}