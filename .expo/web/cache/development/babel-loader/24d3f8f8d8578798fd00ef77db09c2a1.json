{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"elevation\", \"onLongPress\", \"delayLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport Surface from \"../Surface\";\nimport CardActions from \"./CardActions\";\nimport CardContent from \"./CardContent\";\nimport CardCover from \"./CardCover\";\nimport CardTitle from \"./CardTitle\";\nimport { getCardColors } from \"./utils\";\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n    cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n    onLongPress = _ref.onLongPress,\n    delayLongPress = _ref.delayLongPress,\n    onPress = _ref.onPress,\n    _ref$mode = _ref.mode,\n    cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n    children = _ref.children,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'card' : _ref$testID,\n    accessible = _ref.accessible,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isMode = React.useCallback(function (modeToCompare) {\n    return cardMode === modeToCompare;\n  }, [cardMode]);\n  var _React$useRef = React.useRef(new Animated.Value(cardElevation)),\n    elevation = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(cardElevation)),\n    elevationDarkAdaptive = _React$useRef2.current;\n  var animation = theme.animation,\n    dark = theme.dark,\n    mode = theme.mode,\n    roundness = theme.roundness,\n    isV3 = theme.isV3;\n  var prevDarkRef = React.useRef(dark);\n  React.useEffect(function () {\n    prevDarkRef.current = dark;\n  });\n  var prevDark = prevDarkRef.current;\n  var isAdaptiveMode = mode === 'adaptive';\n  var animationDuration = 150 * animation.scale;\n  React.useEffect(function () {\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n  var runElevationAnimation = function runElevationAnimation(pressType) {\n    var isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    }\n  };\n  var handlePressIn = function handlePressIn() {\n    runElevationAnimation('in');\n  };\n  var handlePressOut = function handlePressOut() {\n    runElevationAnimation('out');\n  };\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  var _getCardColors = getCardColors({\n      theme: theme,\n      mode: cardMode\n    }),\n    backgroundColor = _getCardColors.backgroundColor,\n    borderColor = _getCardColors.borderColor;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? (isV3 ? 3 : 1) * roundness : _ref2$borderRadius;\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: borderRadius\n    }, isV3 && !isMode('elevated') && {\n      backgroundColor: backgroundColor\n    }, !isV3 && isMode('outlined') ? styles.resetElevation : {\n      elevation: computedElevation\n    }, style],\n    theme: theme\n  }, isV3 && {\n    elevation: isMode('elevated') ? computedElevation : 0\n  }, rest), isMode('outlined') && React.createElement(View, {\n    pointerEvents: \"none\",\n    testID: testID + \"-outline\",\n    style: [{\n      borderRadius: borderRadius,\n      borderColor: borderColor\n    }, styles.outline]\n  }), React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    delayLongPress: delayLongPress,\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\nCard.Content = CardContent;\nCard.Actions = CardActions;\nCard.Cover = CardCover;\nCard.Title = CardTitle;\nvar styles = StyleSheet.create({\n  innerContainer: {\n    flexShrink: 1\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2\n  },\n  resetElevation: {\n    elevation: 0\n  }\n});\nexport default withInternalTheme(Card);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAW9B,SAASC,iBAAiB;AAE1B,OAAOC,OAAO;AACd,OAAOC,WAAW;AAClB,OAAOC,WAAW;AAElB,OAAOC,SAAS;AAEhB,OAAOC,SAAS;AAChB,SAASC,aAAa;AA2GtB,IAAMC,IAAI,GAAG,SAAPA,IAAI,CAAGC,MAY+D;EAAA,qBAALA,KAXrEC,SAAS;IAAEC,aAAa,+BAAG,CAAC;IAC5BC,WAAW,GAU0DH,KAVrEG,WAAW;IACXC,cAAc,GASuDJ,KATrEI,cAAc;IACdC,OAAO,GAQ8DL,KARrEK,OAAO;IAAA,YAQ8DL,KAPrEM,IAAI;IAAEC,QAAQ,0BAAG,UAAU;IAC3BC,QAAQ,GAM6DR,KANrEQ,QAAQ;IACRC,KAAK,GAKgET,KALrES,KAAK;IACLC,KAAK,GAIgEV,KAJrEU,KAAK;IAAA,cAIgEV,KAHrEW,MAAM;IAANA,MAAM,4BAAG,MAAM;IACfC,UAAU,GAE2DZ,KAFrEY,UAAU;IACPC,gCACkEb;EACrE,IAAMc,MAAM,GAAGvB,KAAK,CAACwB,WAAW,CAC7BC,uBAAmB,EAAK;IACvB,OAAOT,QAAQ,KAAKS,aAAa;EACnC,CAAC,EACD,CAACT,QAAQ,CAAC,CACX;EAGD,oBAA+BhB,KAAK,CAAC0B,MAAM,CACzC,IAAIC,QAAQ,CAACC,KAAK,CAACjB,aAAa,CAAC,CAClC;IAFgBD,0BAATmB,OAAO;EAKf,qBAA2C7B,KAAK,CAAC0B,MAAM,CACrD,IAAIC,QAAQ,CAACC,KAAK,CAACjB,aAAa,CAAC,CAClC;IAFgBmB,uCAATD,OAAO;EAGf,IAAQE,SAAS,GAAkCZ,KAAK,CAAhDY,SAAS;IAAEC,IAAI,GAA4Bb,KAAK,CAArCa,IAAI;IAAEjB,IAAI,GAAsBI,KAAK,CAA/BJ,IAAI;IAAEkB,SAAS,GAAWd,KAAK,CAAzBc,SAAS;IAAEC,OAASf,KAAK,CAAde;EAE1C,IAAMC,WAAW,GAAGnC,KAAK,CAAC0B,MAAM,CAAUM,IAAI,CAAC;EAC/ChC,KAAK,CAACoC,SAAS,CAAC,YAAM;IACpBD,WAAW,CAACN,OAAO,GAAGG,IAAI;EAC5B,CAAC,CAAC;EAEF,IAAMK,QAAQ,GAAGF,WAAW,CAACN,OAAO;EACpC,IAAMS,cAAc,GAAGvB,IAAI,KAAK,UAAU;EAC1C,IAAMwB,iBAAiB,GAAG,GAAG,GAAGR,SAAS,CAACS,KAAK;EAE/CxC,KAAK,CAACoC,SAAS,CAAC,YAAM;IAOpB,IAAIJ,IAAI,IAAIM,cAAc,IAAI,CAACD,QAAQ,EAAE;MACvC3B,SAAS,CAAC+B,QAAQ,CAAC9B,aAAa,CAAC;MACjCmB,qBAAqB,CAACW,QAAQ,CAAC9B,aAAa,CAAC;IAC/C;EACF,CAAC,EAAE,CACD0B,QAAQ,EACRL,IAAI,EACJM,cAAc,EACd3B,aAAa,EACbD,SAAS,EACToB,qBAAqB,CACtB,CAAC;EAEF,IAAMY,qBAAqB,GAAIC,SAAzBD,qBAAqB,CAAIC,SAA0B,EAAK;IAC5D,IAAMC,aAAa,GAAGD,SAAS,KAAK,IAAI;IACxC,IAAIX,IAAI,IAAIM,cAAc,EAAE;MAC1BX,QAAQ,CAACkB,MAAM,CAACf,qBAAqB,EAAE;QACrCgB,OAAO,EAAEF,aAAa,GAAIV,IAAI,GAAG,CAAC,GAAG,CAAC,GAAIvB,aAAa;QACvDoC,QAAQ,EAAER,iBAAiB;QAC3BS,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ,CAAC,MAAM;MACLtB,QAAQ,CAACkB,MAAM,CAACnC,SAAS,EAAE;QACzBoC,OAAO,EAAEF,aAAa,GAAIV,IAAI,GAAG,CAAC,GAAG,CAAC,GAAIvB,aAAa;QACvDoC,QAAQ,EAAER,iBAAiB;QAC3BS,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ;EACF,CAAC;EAED,IAAMC,aAAa,GAAG,SAAhBA,aAAa,GAAS;IAC1BR,qBAAqB,CAAC,IAAI,CAAC;EAC7B,CAAC;EAED,IAAMS,cAAc,GAAG,SAAjBA,cAAc,GAAS;IAC3BT,qBAAqB,CAAC,KAAK,CAAC;EAC9B,CAAC;EAED,IAAMU,KAAK,GAAGpD,KAAK,CAACqD,QAAQ,CAACC,KAAK,CAACrC,QAAQ,CAAC;EAC5C,IAAMsC,QAAQ,GAAGvD,KAAK,CAACqD,QAAQ,CAACG,GAAG,CAACvC,QAAQ,EAAGwC,eAAK;IAAA,OAClDzD,KAAK,CAAC0D,cAAc,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACE,IAAI,GACpCF,KAAK,CAACE,IAAI,CAASC,WAAW,GAC/B,IAAI;EAAA,EACT;EACD,IAAMC,iBAAiB,GACrB7B,IAAI,IAAIM,cAAc,GAAGR,qBAAqB,GAAGpB,SAAS;EAE5D,qBAAyCH,aAAa,CAAC;MACrDY,KAAK,EAALA,KAAK;MACLJ,IAAI,EAAEC;IACR,CAAC,CAAC;IAHM8C,eAAe,kBAAfA,eAAe;IAAEC;EAKzB,YAAuDC,UAAU,CAACC,OAAO,CACvE/C,KAAK,CACN,IAAI,CAAC,CAAe;IAAA,2BAFbgD,YAAY;IAAZA,YAAY,mCAAG,CAAChC,IAAI,GAAG,CAAC,GAAG,CAAC,IAAID;EAIxC,OACEjC,oBAACE,OAAO;IACNgB,KAAK,EAAE,CACL;MACEgD;IACF,CAAC,EACDhC,IAAI,IAAI,CAACX,MAAM,CAAC,UAAU,CAAC,IAAI;MAAEuC;IAAgB,CAAC,EAClD,CAAC5B,IAAI,IAAIX,MAAM,CAAC,UAAU,CAAC,GACvB4C,MAAM,CAACC,cAAc,GACrB;MACE1D,SAAS,EAAEmD;IACb,CAAC,EACL3C,KAAK,CACL;IACFC,KAAK,EAAEA;EAAM,GACRe,IAAI,IAAI;IACXxB,SAAS,EAAEa,MAAM,CAAC,UAAU,CAAC,GAAGsC,iBAAiB,GAAG;EACtD,CAAC,EACGvC,IAAI,GAEPC,MAAM,CAAC,UAAU,CAAC,IACjBvB,oBAACqE,IAAI;IACHC,aAAa,EAAC,MAAM;IACpBlD,MAAM,EAAKA,MAAO,aAAU;IAC5BF,KAAK,EAAE,CACL;MACEgD,YAAY,EAAZA,YAAY;MACZH;IACF,CAAC,EACDI,MAAM,CAACI,OAAO;EACd,EAEL,EACDvE,oBAACwE,wBAAwB;IACvBC,YAAY,EAAE,CAAE;IAChBC,QAAQ,EAAE,EAAE5D,OAAO,IAAIF,WAAW,CAAE;IACpCC,cAAc,EAAEA,cAAe;IAC/BD,WAAW,EAAEA,WAAY;IACzBE,OAAO,EAAEA,OAAQ;IACjB6D,SAAS,EAAE7D,OAAO,IAAIF,WAAW,GAAGsC,aAAa,GAAG0B,SAAU;IAC9DC,UAAU,EAAE/D,OAAO,IAAIF,WAAW,GAAGuC,cAAc,GAAGyB,SAAU;IAChExD,MAAM,EAAEA,MAAO;IACfC,UAAU,EAAEA;EAAW,GAEvBrB,oBAACqE,IAAI;IAACnD,KAAK,EAAEiD,MAAM,CAACW;EAAe,GAChC9E,KAAK,CAACqD,QAAQ,CAACG,GAAG,CAACvC,QAAQ,EAAE,UAACwC,KAAK,EAAEsB,KAAK;IAAA,OACzC/E,KAAK,CAAC0D,cAAc,CAACD,KAAK,CAAC,GACvBzD,KAAK,CAACgF,YAAY,CAACvB,KAAK,EAA6B;MACnDsB,KAAK,EAALA,KAAK;MACL3B,KAAK,EAALA,KAAK;MACLG;IACF,CAAC,CAAC,GACFE,KAAK;EAAA,EACV,CACI,CACkB,CACnB;AAEd,CAAC;AAGDjD,IAAI,CAACyE,OAAO,GAAG7E,WAAW;AAE1BI,IAAI,CAAC0E,OAAO,GAAG/E,WAAW;AAE1BK,IAAI,CAAC2E,KAAK,GAAG9E,SAAS;AAEtBG,IAAI,CAAC4E,KAAK,GAAG9E,SAAS;AAEtB,IAAM6D,MAAM,GAAGH,UAAU,CAACqB,MAAM,CAAC;EAC/BP,cAAc,EAAE;IACdQ,UAAU,EAAE;EACd,CAAC;EACDf,OAAO,EAAE;IACPgB,WAAW,EAAE,CAAC;IACdC,QAAQ,EAAE,UAAU;IACpBC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE;EACV,CAAC;EACDvB,cAAc,EAAE;IACd1D,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAeT,iBAAiB,CAACO,IAAI,CAAC","names":["React","withInternalTheme","Surface","CardActions","CardContent","CardCover","CardTitle","getCardColors","Card","_ref","elevation","cardElevation","onLongPress","delayLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","isMode","useCallback","modeToCompare","useRef","Animated","Value","current","elevationDarkAdaptive","animation","dark","roundness","isV3","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","computedElevation","backgroundColor","borderColor","StyleSheet","flatten","borderRadius","styles","resetElevation","View","pointerEvents","outline","TouchableWithoutFeedback","delayPressIn","disabled","onPressIn","undefined","onPressOut","innerContainer","index","cloneElement","Content","Actions","Cover","Title","create","flexShrink","borderWidth","position","width","height","zIndex"],"sources":["Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport Surface from '../Surface';\nimport CardActions from './CardActions';\nimport CardContent from './CardContent';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle from './CardTitle';\nimport { getCardColors } from './utils';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype ContainedCardProps = {\n  mode?: 'contained';\n  elevation?: never;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Mode = 'elevated' | 'outlined' | 'contained';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `contained` - Card with without outline and elevation @supported Available in v5.x with theme version 3\n   * - `outlined` - Card with an outline.\n   */\n  mode?: Mode;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * Changes Card shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/card-1.png\" />\n *     <figcaption>Elevated card</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/card-2.png\" />\n *     <figcaption>Outlined card</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/card-3.png\" />\n *     <figcaption>Contained card</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  delayLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID = 'card',\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps | ContainedCardProps) & Props) => {\n  const isMode = React.useCallback(\n    (modeToCompare: Mode) => {\n      return cardMode === modeToCompare;\n    },\n    [cardMode]\n  );\n\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness, isV3 } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  const { backgroundColor, borderColor } = getCardColors({\n    theme,\n    mode: cardMode,\n  });\n\n  const { borderRadius = (isV3 ? 3 : 1) * roundness } = (StyleSheet.flatten(\n    style\n  ) || {}) as ViewStyle;\n\n  return (\n    <Surface\n      style={[\n        {\n          borderRadius,\n        },\n        isV3 && !isMode('elevated') && { backgroundColor },\n        !isV3 && isMode('outlined')\n          ? styles.resetElevation\n          : {\n              elevation: computedElevation as unknown as number,\n            },\n        style,\n      ]}\n      theme={theme}\n      {...(isV3 && {\n        elevation: isMode('elevated') ? computedElevation : 0,\n      })}\n      {...rest}\n    >\n      {isMode('outlined') && (\n        <View\n          pointerEvents=\"none\"\n          testID={`${testID}-outline`}\n          style={[\n            {\n              borderRadius,\n              borderColor,\n            },\n            styles.outline,\n          ]}\n        />\n      )}\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        delayLongPress={delayLongPress}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child as React.ReactElement<any>, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexShrink: 1,\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2,\n  },\n  resetElevation: {\n    elevation: 0,\n  },\n});\n\nexport default withInternalTheme(Card);\n"]},"metadata":{},"sourceType":"module"}