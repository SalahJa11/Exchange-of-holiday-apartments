{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar overflowLeft = function overflowLeft(center) {\n  return center < 0;\n};\nvar overflowRight = function overflowRight(center, tooltipWidth) {\n  var _Dimensions$get = Dimensions.get('window'),\n    layoutWidth = _Dimensions$get.width;\n  return center + tooltipWidth > layoutWidth;\n};\nvar overflowBottom = function overflowBottom(childrenY, childrenHeight, tooltipHeight) {\n  var _Dimensions$get2 = Dimensions.get('window'),\n    layoutHeight = _Dimensions$get2.height;\n  return childrenY + childrenHeight + tooltipHeight > layoutHeight;\n};\nvar getTooltipXPosition = function getTooltipXPosition(_ref, _ref2) {\n  var childrenX = _ref.pageX,\n    childrenWidth = _ref.width;\n  var tooltipWidth = _ref2.width;\n  var center = childrenX + (childrenWidth - tooltipWidth) / 2;\n  if (overflowLeft(center)) return childrenX;\n  if (overflowRight(center, tooltipWidth)) return childrenX + childrenWidth - tooltipWidth;\n  return center;\n};\nvar getTooltipYPosition = function getTooltipYPosition(_ref3, _ref4) {\n  var childrenY = _ref3.pageY,\n    childrenHeight = _ref3.height;\n  var tooltipHeight = _ref4.height;\n  if (overflowBottom(childrenY, childrenHeight, tooltipHeight)) return childrenY - tooltipHeight;\n  return childrenY + childrenHeight;\n};\nexport var getTooltipPosition = function getTooltipPosition(_ref5) {\n  var children = _ref5.children,\n    tooltip = _ref5.tooltip,\n    measured = _ref5.measured;\n  if (!measured) return {};\n  return {\n    left: getTooltipXPosition(children, tooltip),\n    top: getTooltipYPosition(children, tooltip)\n  };\n};","map":{"version":3,"mappings":";AAqBA,IAAMA,YAAY,GAAIC,SAAhBD,YAAY,CAAIC,MAAc,EAAc;EAChD,OAAOA,MAAM,GAAG,CAAC;AACnB,CAAC;AAMD,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CAAID,MAAc,EAAEE,YAAoB,EAAc;EACvE,sBAA+BC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;IAAxCC,8BAAPC,KAAK;EAEb,OAAON,MAAM,GAAGE,YAAY,GAAGG,WAAW;AAC5C,CAAC;AAMD,IAAME,cAAc,GAAG,SAAjBA,cAAc,CAClBC,SAAiB,EACjBC,cAAsB,EACtBC,aAAqB,EACT;EACZ,uBAAiCP,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;IAAzCO,gCAARC,MAAM;EAEd,OAAOJ,SAAS,GAAGC,cAAc,GAAGC,aAAa,GAAGC,YAAY;AAClE,CAAC;AAED,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAGC,aAGf;EAAA,IAFFC,SAAS,GAA6CD,KAA7DE,KAAK;IAAoBC,gBAAoCH,KAA3CR,KAAK;EAAsC,IACtDJ,eAA6BgB,MAApCZ,KAAK;EAEP,IAAMN,MAAM,GAAGe,SAAS,GAAG,CAACE,aAAa,GAAGf,YAAY,IAAI,CAAC;EAE7D,IAAIH,YAAY,CAACC,MAAM,CAAC,EAAE,OAAOe,SAAS;EAE1C,IAAId,aAAa,CAACD,MAAM,EAAEE,YAAY,CAAC,EACrC,OAAOa,SAAS,GAAGE,aAAa,GAAGf,YAAY;EAEjD,OAAOF,MAAM;AACf,CAAC;AAED,IAAMmB,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAGC,cAGf;EAAA,IAFFZ,SAAS,GAA+CY,MAA/DC,KAAK;IAAqBZ,iBAAqCW,MAA7CR,MAAM;EAAuC,IACvDF,gBAA8BY,MAAtCV,MAAM;EAER,IAAIL,cAAc,CAACC,SAAS,EAAEC,cAAc,EAAEC,aAAa,CAAC,EAC1D,OAAOF,SAAS,GAAGE,aAAa;EAElC,OAAOF,SAAS,GAAGC,cAAc;AACnC,CAAC;AAED,OAAO,IAAMc,kBAAkB,GAAG,SAArBA,kBAAkB,CAAGC,OAIqB;EAAA,IAHrDC,QAAQ,GAGID,MAHZC,QAAQ;IACRC,OAAO,GAEKF,MAFZE,OAAO;IACPC,WACYH,MADZG;EAEA,IAAI,CAACA,QAAQ,EAAE,OAAO,CAAC,CAAC;EAExB,OAAO;IACLC,IAAI,EAAEf,mBAAmB,CAACY,QAAQ,EAAEC,OAAO,CAAC;IAC5CG,GAAG,EAAEV,mBAAmB,CAACM,QAAQ,EAAEC,OAAO;EAC5C,CAAC;AACH,CAAC","names":["overflowLeft","center","overflowRight","tooltipWidth","Dimensions","get","layoutWidth","width","overflowBottom","childrenY","childrenHeight","tooltipHeight","layoutHeight","height","getTooltipXPosition","_ref","childrenX","pageX","childrenWidth","_ref2","getTooltipYPosition","_ref3","pageY","_ref4","getTooltipPosition","_ref5","children","tooltip","measured","left","top"],"sources":["utils.ts"],"sourcesContent":["import { Dimensions, LayoutRectangle } from 'react-native';\n\ntype ChildrenMeasurement = {\n  width: number;\n  height: number;\n  pageX: number;\n  pageY: number;\n};\n\ntype TooltipLayout = LayoutRectangle;\n\nexport type Measurement = {\n  children: ChildrenMeasurement;\n  tooltip: TooltipLayout;\n  measured: boolean;\n};\n\n/**\n * Return true when the tooltip center x-coordinate relative to the wrapped element is negative.\n * The tooltip will be placed at the starting x-coordinate from the wrapped element.\n */\nconst overflowLeft = (center: number): boolean => {\n  return center < 0;\n};\n\n/**\n * Return true when the tooltip center x-coordinate + tooltip width is greater than the layout width\n * The tooltip width will grow from right to left relative to the wrapped element.\n */\nconst overflowRight = (center: number, tooltipWidth: number): boolean => {\n  const { width: layoutWidth } = Dimensions.get('window');\n\n  return center + tooltipWidth > layoutWidth;\n};\n\n/**\n * Return true when the children y-coordinate + its height + tooltip height is greater than the layout height.\n * The tooltip will be placed at the top of the wrapped element.\n */\nconst overflowBottom = (\n  childrenY: number,\n  childrenHeight: number,\n  tooltipHeight: number\n): boolean => {\n  const { height: layoutHeight } = Dimensions.get('window');\n\n  return childrenY + childrenHeight + tooltipHeight > layoutHeight;\n};\n\nconst getTooltipXPosition = (\n  { pageX: childrenX, width: childrenWidth }: ChildrenMeasurement,\n  { width: tooltipWidth }: TooltipLayout\n): number => {\n  const center = childrenX + (childrenWidth - tooltipWidth) / 2;\n\n  if (overflowLeft(center)) return childrenX;\n\n  if (overflowRight(center, tooltipWidth))\n    return childrenX + childrenWidth - tooltipWidth;\n\n  return center;\n};\n\nconst getTooltipYPosition = (\n  { pageY: childrenY, height: childrenHeight }: ChildrenMeasurement,\n  { height: tooltipHeight }: TooltipLayout\n): number => {\n  if (overflowBottom(childrenY, childrenHeight, tooltipHeight))\n    return childrenY - tooltipHeight;\n\n  return childrenY + childrenHeight;\n};\n\nexport const getTooltipPosition = ({\n  children,\n  tooltip,\n  measured,\n}: Measurement): {} | { left: number; top: number } => {\n  if (!measured) return {};\n\n  return {\n    left: getTooltipXPosition(children, tooltip),\n    top: getTooltipYPosition(children, tooltip),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}