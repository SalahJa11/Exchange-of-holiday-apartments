{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport var ListAccordionGroupContext = React.createContext(null);\nvar ListAccordionGroup = function ListAccordionGroup(_ref) {\n  var expandedIdProp = _ref.expandedId,\n    onAccordionPress = _ref.onAccordionPress,\n    children = _ref.children;\n  var _React$useState = React.useState(undefined),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    expandedId = _React$useState2[0],\n    setExpandedId = _React$useState2[1];\n  var onAccordionPressDefault = function onAccordionPressDefault(newExpandedId) {\n    setExpandedId(function (currentExpandedId) {\n      return currentExpandedId === newExpandedId ? undefined : newExpandedId;\n    });\n  };\n  return React.createElement(ListAccordionGroupContext.Provider, {\n    value: {\n      expandedId: expandedIdProp || expandedId,\n      onAccordionPress: onAccordionPress || onAccordionPressDefault\n    }\n  }, children);\n};\nListAccordionGroup.displayName = 'List.AccordionGroup';\nexport default ListAccordionGroup;","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAsBA,OAAO,IAAMC,yBAAyB,GAAGD,KAAK,CAACE,aAAN,CAEvC,IAFuC,CAAlC;AAyCP,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,OAIX;EAAA,IAHCC,cADc,QAC1BC,UAAU;IACVC,gBAF0B,QAE1BA,gBAF0B;IAG1BC;EAEA,sBAAoCP,KAAK,CAACQ,QAAN,CAElCC,SAFkC,CAApC;IAAA;IAAOJ,UAAD;IAAaK,aAAb;EAIN,IAAMC,uBAAuB,GAAIC,SAA3BD,uBAAuB,CAAIC,aAAD,EAAoC;IAClEF,aAAa,CAAEG,2BAAD;MAAA,OACZA,iBAAiB,KAAKD,aAAtB,GAAsCH,SAAtC,GAAkDG,aADvC;IAAA,EAAb;EAGD,CAJD;EAMA,OACEZ,oBAACC,yBAAD,CAA2Ba,QAA3B;IACEC,KAAK,EAAE;MACLV,UAAU,EAAED,cAAc,IAAIC,UADzB;MAELC,gBAAgB,EAAEA,gBAAgB,IAAIK;IAFjC;EADT,GAMGJ,QANH,CADF;AAUD,CAzBD;AA2BAJ,kBAAkB,CAACa,WAAnB,GAAiC,qBAAjC;AAEA,eAAeb,kBAAf","names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","expandedIdProp","expandedId","onAccordionPress","children","useState","undefined","setExpandedId","onAccordionPressDefault","newExpandedId","currentExpandedId","Provider","value","displayName"],"sources":["ListAccordionGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n"]},"metadata":{},"sourceType":"module"}