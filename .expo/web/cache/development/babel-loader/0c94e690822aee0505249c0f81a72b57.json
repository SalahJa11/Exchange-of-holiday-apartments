{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useInternalTheme } from \"../../../core/theming\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\nvar LabelBackground = function LabelBackground(_ref) {\n  var parentState = _ref.parentState,\n    _ref$labelProps = _ref.labelProps,\n    placeholderStyle = _ref$labelProps.placeholderStyle,\n    baseLabelTranslateX = _ref$labelProps.baseLabelTranslateX,\n    topPosition = _ref$labelProps.topPosition,\n    hasActiveOutline = _ref$labelProps.hasActiveOutline,\n    label = _ref$labelProps.label,\n    backgroundColor = _ref$labelProps.backgroundColor,\n    roundness = _ref$labelProps.roundness,\n    labelStyle = _ref.labelStyle,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  var hasFocus = hasActiveOutline || parentState.value;\n  var opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0]\n  });\n  var _useInternalTheme = useInternalTheme(),\n    isV3 = _useInternalTheme.isV3;\n  var labelTranslationX = {\n    translateX: parentState.labeled.interpolate({\n      inputRange: [0, 1],\n      outputRange: [-baseLabelTranslateX, 0]\n    })\n  };\n  var labelTextScaleY = {\n    scaleY: parentState.labeled.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.2, 1]\n    })\n  };\n  var labelTextTransform = [].concat(_toConsumableArray(labelStyle.transform), [labelTextScaleY]);\n  var labelTextWidth = isV3 ? {\n    width: parentState.labelLayout.width - placeholderStyle.paddingHorizontal\n  } : {\n    maxWidth: parentState.labelLayout.width - 2 * placeholderStyle.paddingHorizontal\n  };\n  return label ? [React.createElement(Animated.View, {\n    key: \"labelBackground-view\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.view, {\n      backgroundColor: backgroundColor,\n      maxHeight: Math.max(roundness / 3, 2),\n      opacity: opacity,\n      bottom: Math.max(roundness, 2),\n      transform: [labelTranslationX]\n    }]\n  }), React.createElement(AnimatedText, {\n    key: \"labelBackground-text\",\n    style: [placeholderStyle, labelStyle, styles.outlinedLabel, isV3 && styles.md3OutlinedLabel, {\n      top: topPosition + 1,\n      backgroundColor: backgroundColor,\n      opacity: opacity,\n      transform: labelTextTransform\n    }, labelTextWidth],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label)] : null;\n};\nexport default LabelBackground;\nvar styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent'\n  },\n  md3OutlinedLabel: {\n    left: 8\n  }\n});","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","AnimatedText","LabelBackground","_ref","parentState","labelProps","placeholderStyle","baseLabelTranslateX","topPosition","hasActiveOutline","label","backgroundColor","roundness","labelStyle","maxFontSizeMultiplier","hasFocus","value","opacity","labeled","interpolate","inputRange","outputRange","isV3","labelTranslationX","translateX","labelTextScaleY","scaleY","labelTextTransform","transform","labelTextWidth","width","labelLayout","paddingHorizontal","maxWidth","Animated","View","key","pointerEvents","style","StyleSheet","absoluteFill","styles","view","maxHeight","Math","max","bottom","outlinedLabel","md3OutlinedLabel","top","numberOfLines","create","position","left","color"],"sources":["LabelBackground.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\n\nimport { useInternalTheme } from '../../../core/theming';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport type { LabelBackgroundProps } from '../types';\n\nconst LabelBackground = ({\n  parentState,\n  labelProps: {\n    placeholderStyle,\n    baseLabelTranslateX,\n    topPosition,\n    hasActiveOutline,\n    label,\n    backgroundColor,\n    roundness,\n  },\n  labelStyle,\n  maxFontSizeMultiplier,\n}: LabelBackgroundProps) => {\n  const hasFocus = hasActiveOutline || parentState.value;\n  const opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0],\n  });\n\n  const { isV3 } = useInternalTheme();\n\n  const labelTranslationX = {\n    translateX: parentState.labeled.interpolate({\n      inputRange: [0, 1],\n      outputRange: [-baseLabelTranslateX, 0],\n    }),\n  };\n\n  const labelTextScaleY = {\n    scaleY: parentState.labeled.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.2, 1],\n    }),\n  };\n\n  const labelTextTransform = [...labelStyle.transform, labelTextScaleY];\n\n  const labelTextWidth = isV3\n    ? {\n        width:\n          parentState.labelLayout.width - placeholderStyle.paddingHorizontal,\n      }\n    : {\n        maxWidth:\n          parentState.labelLayout.width -\n          2 * placeholderStyle.paddingHorizontal,\n      };\n\n  return label\n    ? [\n        <Animated.View\n          key=\"labelBackground-view\"\n          pointerEvents=\"none\"\n          style={[\n            StyleSheet.absoluteFill,\n            styles.view,\n            {\n              backgroundColor,\n              maxHeight: Math.max(roundness / 3, 2),\n              opacity,\n              bottom: Math.max(roundness, 2),\n              transform: [labelTranslationX],\n            },\n          ]}\n        />,\n        <AnimatedText\n          key=\"labelBackground-text\"\n          style={[\n            placeholderStyle,\n            labelStyle,\n            styles.outlinedLabel,\n            isV3 && styles.md3OutlinedLabel,\n            {\n              top: topPosition + 1,\n              backgroundColor,\n              opacity,\n              transform: labelTextTransform,\n            },\n            labelTextWidth,\n          ]}\n          numberOfLines={1}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        >\n          {label}\n        </AnimatedText>,\n      ]\n    : null;\n};\n\nexport default LabelBackground;\n\nconst styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12,\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent',\n  },\n  md3OutlinedLabel: {\n    left: 8,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}