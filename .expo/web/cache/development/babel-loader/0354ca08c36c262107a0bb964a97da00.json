{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport { getAndroidSelectionControlColor } from \"../Checkbox/utils\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nvar BORDER_WIDTH = 2;\nvar RadioButtonAndroid = function RadioButtonAndroid(_ref) {\n  var disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    theme = _ref.theme,\n    value = _ref.value,\n    status = _ref.status,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(BORDER_WIDTH)),\n    borderAnim = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(1)),\n    radioAnim = _React$useRef2.current;\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    var _getAndroidSelectionC = getAndroidSelectionControlColor({\n        theme: theme,\n        disabled: disabled,\n        checked: checked,\n        customColor: rest.color,\n        customUncheckedColor: rest.uncheckedColor\n      }),\n      rippleColor = _getAndroidSelectionC.rippleColor,\n      selectionControlColor = _getAndroidSelectionC.selectionControlColor;\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function (event) {\n        handlePress({\n          onPress: onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value,\n          event: event\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(Animated.View, {\n      style: [styles.radio, {\n        borderColor: selectionControlColor,\n        borderWidth: borderAnim\n      }]\n    }, checked ? React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.radioContainer]\n    }, React.createElement(Animated.View, {\n      style: [styles.dot, {\n        backgroundColor: selectionControlColor,\n        transform: [{\n          scale: radioAnim\n        }]\n      }]\n    })) : null));\n  });\n};\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withInternalTheme(RadioButtonAndroid);\nvar RadioButtonAndroidWithTheme = withInternalTheme(RadioButtonAndroid);\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };","map":{"version":3,"mappings":"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","names":["React","withInternalTheme","getAndroidSelectionControlColor","TouchableRipple","RadioButtonContext","handlePress","isChecked","BORDER_WIDTH","RadioButtonAndroid","_ref","disabled","onPress","theme","value","status","testID","rest","useRef","Animated","Value","borderAnim","current","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","Consumer","context","checked","contextValue","customColor","color","customUncheckedColor","uncheckedColor","rippleColor","selectionControlColor","borderless","undefined","event","onValueChange","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"sources":["RadioButtonAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport { getAndroidSelectionControlColor } from '../Checkbox/utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { rippleColor, selectionControlColor } =\n          getAndroidSelectionControlColor({\n            theme,\n            disabled,\n            checked,\n            customColor: rest.color,\n            customUncheckedColor: rest.uncheckedColor,\n          });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : (event) => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                      event,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: selectionControlColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: selectionControlColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withInternalTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withInternalTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}