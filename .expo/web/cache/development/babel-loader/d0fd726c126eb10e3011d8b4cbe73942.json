{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTheme } from \"../../core/theming\";\nimport SegmentedButtonItem from \"./SegmentedButtonItem\";\nimport { getDisabledSegmentedButtonStyle } from \"./utils\";\nvar SegmentedButtons = function SegmentedButtons(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    buttons = _ref.buttons,\n    multiSelect = _ref.multiSelect,\n    density = _ref.density,\n    style = _ref.style;\n  var theme = useTheme();\n  return React.createElement(View, {\n    style: [styles.row, style]\n  }, buttons.map(function (item, i) {\n    var disabledChildStyle = getDisabledSegmentedButtonStyle({\n      theme: theme,\n      buttons: buttons,\n      index: i\n    });\n    var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n    var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;\n    var onPress = function onPress(e) {\n      var _item$onPress;\n      (_item$onPress = item.onPress) === null || _item$onPress === void 0 ? void 0 : _item$onPress.call(item, e);\n      var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(function (val) {\n        return item.value !== val;\n      }) : [].concat(_toConsumableArray(value), [item.value]) : item.value;\n      onValueChange(nextValue);\n    };\n    return React.createElement(SegmentedButtonItem, _extends({}, item, {\n      key: i,\n      checked: checked,\n      segment: segment,\n      density: density,\n      onPress: onPress,\n      style: [item.style, disabledChildStyle]\n    }));\n  }));\n};\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nexport default SegmentedButtons;\nexport { SegmentedButtons };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAS9B,SAASC,QAAQ;AAEjB,OAAOC,mBAAmB;AAC1B,SAASC,+BAA+B;AA+GxC,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAGC,MAOZ;EAAA,IANXC,KAAK,GAMCD,KANNC,KAAK;IACLC,aAAa,GAKPF,KALNE,aAAa;IACbC,OAAO,GAIDH,KAJNG,OAAO;IACPC,WAAW,GAGLJ,KAHNI,WAAW;IACXC,OAAO,GAEDL,KAFNK,OAAO;IACPC,QACMN,KADNM;EAEA,IAAMC,KAAK,GAAGX,QAAQ,EAAE;EACxB,OACED,oBAACa,IAAI;IAACF,KAAK,EAAE,CAACG,MAAM,CAACC,GAAG,EAAEJ,KAAK;EAAE,GAC9BH,OAAO,CAACQ,GAAG,CAAC,UAACC,IAAI,EAAEC,CAAC,EAAK;IACxB,IAAMC,kBAAkB,GAAGhB,+BAA+B,CAAC;MACzDS,KAAK,EAALA,KAAK;MACLJ,OAAO,EAAPA,OAAO;MACPY,KAAK,EAAEF;IACT,CAAC,CAAC;IACF,IAAMG,OAAO,GACXH,CAAC,KAAK,CAAC,GAAG,OAAO,GAAGA,CAAC,KAAKV,OAAO,CAACc,MAAM,GAAG,CAAC,GAAG,MAAM,GAAGC,SAAS;IAEnE,IAAMC,OAAO,GACXf,WAAW,IAAIgB,KAAK,CAACC,OAAO,CAACpB,KAAK,CAAC,GAC/BA,KAAK,CAACqB,QAAQ,CAACV,IAAI,CAACX,KAAK,CAAC,GAC1BA,KAAK,KAAKW,IAAI,CAACX,KAAK;IAE1B,IAAMsB,OAAO,GAAIC,SAAXD,OAAO,CAAIC,CAAwB,EAAK;MAAA;MAC5C,qBAAI,CAACD,OAAO,kDAAZE,uBAAI,EAAWD,CAAC,CAAC;MAEjB,IAAME,SAAS,GACbtB,WAAW,IAAIgB,KAAK,CAACC,OAAO,CAACpB,KAAK,CAAC,GAC/BkB,OAAO,GACLlB,KAAK,CAAC0B,MAAM,CAAEC,aAAG;QAAA,OAAKhB,IAAI,CAACX,KAAK,KAAK2B,GAAG;MAAA,EAAC,gCACrC3B,KAAK,IAAEW,IAAI,CAACX,KAAK,EAAC,GACxBW,IAAI,CAACX,KAAK;MAGhBC,aAAa,CAACwB,SAAS,CAAC;IAC1B,CAAC;IAED,OACE/B,oBAACE,mBAAmB,eACde,IAAI;MACRiB,GAAG,EAAEhB,CAAE;MACPM,OAAO,EAAEA,OAAQ;MACjBH,OAAO,EAAEA,OAAQ;MACjBX,OAAO,EAAEA,OAAQ;MACjBkB,OAAO,EAAEA,OAAQ;MACjBjB,KAAK,EAAE,CAACM,IAAI,CAACN,KAAK,EAAEQ,kBAAkB;IAAE,GACxC;EAEN,CAAC,CAAC,CACG;AAEX,CAAC;AAED,IAAML,MAAM,GAAGqB,UAAU,CAACC,MAAM,CAAC;EAC/BrB,GAAG,EAAE;IACHsB,aAAa,EAAE;EACjB;AACF,CAAC,CAAC;AAEF,eAAejC,gBAAgB;AAG/B,SAASA,gBAAoC","names":["React","useTheme","SegmentedButtonItem","getDisabledSegmentedButtonStyle","SegmentedButtons","_ref","value","onValueChange","buttons","multiSelect","density","style","theme","View","styles","row","map","item","i","disabledChildStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","_item$onPress","nextValue","filter","val","key","StyleSheet","create","flexDirection"],"sources":["SegmentedButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\n\ntype ConditionalValue =\n  | {\n      /**\n       * Array of the currently selected segmented button values.\n       */\n      value: string[];\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect: true;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string[]) => void;\n    }\n  | {\n      /**\n       * Value of the currently selected segmented button.\n       */\n      value: string;\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect?: false;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string) => void;\n    };\n\nexport type Props = {\n  /**\n   * Buttons to display as options in toggle button.\n   * Button should contain the following properties:\n   * - `value`: value of button (required)\n   * - `icon`: icon to display for the item\n   * - `disabled`: whether the button is disabled\n   * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n   * - `onPress`: callback that is called when button is pressed\n   * - `label`: label text of the button\n   * - `showSelectedCheck`: show optional check icon to indicate selected state\n   * - `style`: pass additional styles for the button\n   * - `testID`: testID to be used on tests\n   */\n  buttons: {\n    value: string;\n    icon?: IconSource;\n    disabled?: boolean;\n    accessibilityLabel?: string;\n    onPress?: (event: GestureResponderEvent) => void;\n    label?: string;\n    showSelectedCheck?: boolean;\n    style?: StyleProp<ViewStyle>;\n    testID?: string;\n  }[];\n  /**\n   * Density is applied to the height, to allow usage in denser UIs\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n} & ConditionalValue;\n\n/**\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/segmented-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SafeAreaView, StyleSheet } from 'react-native';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <SegmentedButtons\n *         value={value}\n *         onValueChange={setValue}\n *         buttons={[\n *           {\n *             value: 'walk',\n *             label: 'Walking',\n *           },\n *           {\n *             value: 'train',\n *             label: 'Transit',\n *           },\n *           { value: 'drive', label: 'Driving' },\n *         ]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     alignItems: 'center',\n *   },\n * });\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = ({\n  value,\n  onValueChange,\n  buttons,\n  multiSelect,\n  density,\n  style,\n}: Props) => {\n  const theme = useTheme();\n  return (\n    <View style={[styles.row, style]}>\n      {buttons.map((item, i) => {\n        const disabledChildStyle = getDisabledSegmentedButtonStyle({\n          theme,\n          buttons,\n          index: i,\n        });\n        const segment =\n          i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n\n        const checked =\n          multiSelect && Array.isArray(value)\n            ? value.includes(item.value)\n            : value === item.value;\n\n        const onPress = (e: GestureResponderEvent) => {\n          item.onPress?.(e);\n\n          const nextValue =\n            multiSelect && Array.isArray(value)\n              ? checked\n                ? value.filter((val) => item.value !== val)\n                : [...value, item.value]\n              : item.value;\n\n          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n          onValueChange(nextValue);\n        };\n\n        return (\n          <SegmentedButtonItem\n            {...item}\n            key={i}\n            checked={checked}\n            segment={segment}\n            density={density}\n            onPress={onPress}\n            style={[item.style, disabledChildStyle]}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"]},"metadata":{},"sourceType":"module"}