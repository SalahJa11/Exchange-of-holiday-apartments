{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"activeUnderlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n  _excluded2 = [\"fontSize\", \"fontWeight\", \"height\", \"paddingHorizontal\", \"textAlign\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport InputLabel from \"./Label/InputLabel\";\nimport TextInputAdornment from \"./Adornment/TextInputAdornment\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding } from \"./helpers\";\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./Adornment/enums\";\nvar MINIMIZED_LABEL_Y_OFFSET = -18;\nvar LABEL_PADDING_TOP = 30;\nvar LABEL_PADDING_TOP_DENSE = 24;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT_WL = 52;\nvar MIN_DENSE_HEIGHT = 40;\nvar TextInputFlat = function (_React$Component) {\n  _inherits(TextInputFlat, _React$Component);\n  var _super = _createSuper(TextInputFlat);\n  function TextInputFlat() {\n    _classCallCheck(this, TextInputFlat);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TextInputFlat, [{\n    key: \"render\",\n    value: function render() {\n      var _affixTopPosition, _onAffixChange, _topPosition;\n      var _this$props = this.props,\n        disabled = _this$props.disabled,\n        editable = _this$props.editable,\n        label = _this$props.label,\n        error = _this$props.error,\n        selectionColor = _this$props.selectionColor,\n        underlineColor = _this$props.underlineColor,\n        activeUnderlineColor = _this$props.activeUnderlineColor,\n        dense = _this$props.dense,\n        style = _this$props.style,\n        theme = _this$props.theme,\n        render = _this$props.render,\n        multiline = _this$props.multiline,\n        parentState = _this$props.parentState,\n        innerRef = _this$props.innerRef,\n        onFocus = _this$props.onFocus,\n        forceFocus = _this$props.forceFocus,\n        onBlur = _this$props.onBlur,\n        onChangeText = _this$props.onChangeText,\n        onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n        onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,\n        onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,\n        left = _this$props.left,\n        right = _this$props.right,\n        placeholderTextColor = _this$props.placeholderTextColor,\n        rest = _objectWithoutProperties(_this$props, _excluded);\n      var isAndroid = Platform.OS === 'android';\n      var colors = theme.colors,\n        fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n      var _ref = StyleSheet.flatten(style) || {},\n        fontSizeStyle = _ref.fontSize,\n        fontWeight = _ref.fontWeight,\n        height = _ref.height,\n        paddingHorizontal = _ref.paddingHorizontal,\n        textAlign = _ref.textAlign,\n        viewStyle = _objectWithoutProperties(_ref, _excluded2);\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n      var adornmentConfig = getAdornmentConfig({\n        left: left,\n        right: right\n      });\n      var _calculateFlatInputHo = calculateFlatInputHorizontalPadding({\n          adornmentConfig: adornmentConfig\n        }),\n        paddingLeft = _calculateFlatInputHo.paddingLeft,\n        paddingRight = _calculateFlatInputHo.paddingRight;\n      if (isPaddingHorizontalPassed) {\n        paddingLeft = paddingHorizontal;\n        paddingRight = paddingHorizontal;\n      }\n      var leftLayout = parentState.leftLayout,\n        rightLayout = parentState.rightLayout;\n      var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n        adornmentConfig: adornmentConfig,\n        rightAffixWidth: rightAffixWidth,\n        leftAffixWidth: leftAffixWidth,\n        paddingHorizontal: paddingHorizontal,\n        inputOffset: FLAT_INPUT_OFFSET,\n        mode: InputMode.Flat\n      });\n      var inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = colors.disabled;\n        underlineColorCustom = 'transparent';\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n        placeholderColor = colors.placeholder;\n        errorColor = colors.error;\n        underlineColorCustom = underlineColor || colors.disabled;\n      }\n      var containerStyle = {\n        backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n        borderTopLeftRadius: theme.roundness,\n        borderTopRightRadius: theme.roundness\n      };\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n      var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n      if (height && typeof height !== 'number') {\n        console.warn('Currently we support only numbers in height prop');\n      }\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: FLAT_INPUT_OFFSET,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: isAndroid,\n        styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingFlat = adjustPaddingFlat(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n      var iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n      var leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n        height: flatHeight\n      }, paddingFlat), {}, {\n        affixHeight: leftLayout.height\n      })) : null;\n      var rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n        height: flatHeight\n      }, paddingFlat), {}, {\n        affixHeight: rightLayout.height\n      })) : null;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        paddingOffset: {\n          paddingLeft: paddingLeft,\n          paddingRight: paddingRight\n        },\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        errorColor: errorColor,\n        roundness: theme.roundness\n      };\n      var affixTopPosition = (_affixTopPosition = {}, _defineProperty2(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty2(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n      var onAffixChange = (_onAffixChange = {}, _defineProperty2(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty2(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n      var adornmentProps = {\n        paddingHorizontal: paddingHorizontal,\n        adornmentConfig: adornmentConfig,\n        forceFocus: forceFocus,\n        topPosition: (_topPosition = {}, _defineProperty2(_topPosition, AdornmentType.Affix, affixTopPosition), _defineProperty2(_topPosition, AdornmentType.Icon, iconTopPosition), _topPosition),\n        onAffixChange: onAffixChange,\n        isTextInputFocused: this.props.parentState.focused\n      };\n      if (adornmentConfig.length) {\n        adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n          left: left,\n          right: right,\n          textStyle: _objectSpread(_objectSpread({}, font), {}, {\n            fontSize: fontSize,\n            fontWeight: fontWeight\n          }),\n          visible: this.props.parentState.labeled\n        });\n      }\n      return React.createElement(View, {\n        style: [containerStyle, viewStyle]\n      }, React.createElement(Underline, {\n        parentState: parentState,\n        underlineColorCustom: underlineColorCustom,\n        error: error,\n        colors: colors,\n        activeColor: activeColor\n      }), React.createElement(View, {\n        style: [styles.labelContainer, {\n          minHeight: minHeight\n        }]\n      }, !isAndroid && multiline && label && React.createElement(View, {\n        testID: \"patch-container\",\n        pointerEvents: \"none\",\n        style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n          backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n          left: paddingLeft,\n          right: paddingRight\n        }]\n      }), React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({}, rest), {}, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, {\n          paddingLeft: paddingLeft,\n          paddingRight: paddingRight\n        }, !multiline || multiline && height ? {\n          height: flatHeight\n        } : {}, paddingFlat, _objectSpread(_objectSpread({}, font), {}, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center',\n          textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n        }), Platform.OS === 'web' && {\n          outline: 'none'\n        }, adornmentStyleAdjustmentForNativeInput]\n      }))), React.createElement(TextInputAdornment, adornmentProps));\n    }\n  }]);\n  return TextInputFlat;\n}(React.Component);\n_defineProperty(TextInputFlat, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, props);\n  }\n});\nexport default TextInputFlat;\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n    error = _ref2.error,\n    colors = _ref2.colors,\n    activeColor = _ref2.activeColor,\n    underlineColorCustom = _ref2.underlineColorCustom;\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","color","InputLabel","TextInputAdornment","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","FLAT_INPUT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingFlat","interpolatePlaceholder","calculateFlatAffixTopPosition","calculateFlatInputHorizontalPadding","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","AdornmentSide","AdornmentType","InputMode","MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","render","props","disabled","editable","label","error","selectionColor","underlineColor","activeUnderlineColor","dense","style","theme","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","isAndroid","Platform","OS","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","height","paddingHorizontal","textAlign","viewStyle","isPaddingHorizontalPassed","undefined","adornmentConfig","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","inputOffset","mode","Flat","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","containerStyle","backgroundColor","dark","background","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","styles","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","placeholderOpacity","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","wiggleOffsetX","paddingOffset","affixTopPosition","Left","Right","onAffixChange","adornmentProps","Affix","Icon","isTextInputFocused","length","textStyle","visible","View","Underline","labelContainer","testID","pointerEvents","absoluteFill","densePatchContainer","patchContainer","ref","underlineColorAndroid","input","textAlignVertical","outline","Component","NativeTextInput","Animated","underline","transform","scaleY","create","position","bottom","zIndex","paddingTop","paddingBottom","flexGrow","margin"],"sources":["TextInputFlat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nclass TextInputFlat extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      activeUnderlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const isAndroid = Platform.OS === 'android';\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      paddingHorizontal,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    const isPaddingHorizontalPassed =\n      paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n    const adornmentConfig = getAdornmentConfig({\n      left,\n      right,\n    });\n\n    let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n      adornmentConfig,\n    });\n\n    if (isPaddingHorizontalPassed) {\n      paddingLeft = paddingHorizontal as number;\n      paddingRight = paddingHorizontal as number;\n    }\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        paddingHorizontal,\n        inputOffset: FLAT_INPUT_OFFSET,\n        mode: InputMode.Flat,\n      }\n    );\n\n    let inputTextColor,\n      activeColor,\n      underlineColorCustom,\n      placeholderColor,\n      errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      underlineColorCustom = 'transparent';\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error\n        ? colors.error\n        : activeUnderlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      errorColor = colors.error;\n      underlineColorCustom = underlineColor || colors.disabled;\n    }\n\n    const containerStyle = {\n      backgroundColor: theme.dark\n        ? color(colors.background).lighten(0.24).rgb().string()\n        : color(colors.background).darken(0.06).rgb().string(),\n      borderTopLeftRadius: theme.roundness,\n      borderTopRightRadius: theme.roundness,\n    };\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n        (labelHalfWidth - (labelScale * labelWidth) / 2) +\n      (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n    const minInputHeight = dense\n      ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) -\n        LABEL_PADDING_TOP_DENSE\n      : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: FLAT_INPUT_OFFSET,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid,\n      styles: StyleSheet.flatten(\n        dense ? styles.inputFlatDense : styles.inputFlat\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingFlat = adjustPaddingFlat({\n      ...paddingSettings,\n      pad,\n    });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const minHeight =\n      height ||\n      (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n    const flatHeight =\n      inputHeight +\n      (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n    const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n    const leftAffixTopPosition = leftLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: leftLayout.height,\n        })\n      : null;\n\n    const rightAffixTopPosition = rightLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: rightLayout.height,\n        })\n      : null;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      paddingOffset: { paddingLeft, paddingRight },\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      errorColor,\n      roundness: theme.roundness,\n    };\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      paddingHorizontal,\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Affix]: affixTopPosition,\n        [AdornmentType.Icon]: iconTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: this.props.parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={[containerStyle, viewStyle]}>\n        <Underline\n          parentState={parentState}\n          underlineColorCustom={underlineColorCustom}\n          error={error}\n          colors={colors}\n          activeColor={activeColor}\n        />\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              minHeight,\n            },\n          ]}\n        >\n          {!isAndroid && multiline && label && (\n            // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n            // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n            <View\n              testID=\"patch-container\"\n              pointerEvents=\"none\"\n              style={[\n                StyleSheet.absoluteFill,\n                dense ? styles.densePatchContainer : styles.patchContainer,\n                {\n                  backgroundColor:\n                    viewStyle.backgroundColor || containerStyle.backgroundColor,\n                  left: paddingLeft,\n                  right: paddingRight,\n                },\n              ]}\n            />\n          )}\n          <InputLabel parentState={parentState} labelProps={labelProps} />\n          {render?.({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label\n              ? parentState.placeholder\n              : this.props.placeholder,\n            placeholderTextColor: placeholderTextColor ?? placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              { paddingLeft, paddingRight },\n              !multiline || (multiline && height) ? { height: flatHeight } : {},\n              paddingFlat,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          })}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    );\n  }\n}\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}