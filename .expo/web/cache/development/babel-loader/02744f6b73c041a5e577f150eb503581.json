{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport default function useLayout() {\n  var _React$useState = React.useState({\n      height: 0,\n      width: 0,\n      measured: false\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    layout = _React$useState2[0],\n    setLayout = _React$useState2[1];\n  var onLayout = React.useCallback(function (e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n      height = _e$nativeEvent$layout.height,\n      width = _e$nativeEvent$layout.width;\n    if (height === layout.height && width === layout.width) {\n      return;\n    }\n    setLayout({\n      height: height,\n      width: width,\n      measured: true\n    });\n  }, [layout.height, layout.width]);\n  return [layout, onLayout];\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAG9B,eAAe,SAASC,SAAS,GAAG;EAClC,sBAA4BD,KAAK,CAACE,QAAQ,CAIvC;MAAEC,MAAM,EAAE,CAAC;MAAEC,KAAK,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAM,CAAC,CAAC;IAAA;IAJrCC,MAAM;IAAEC,SAAS;EAMxB,IAAMC,QAAQ,GAAGR,KAAK,CAACS,WAAW,CAC/BC,WAAoB,EAAK;IACxB,4BAA0BA,CAAC,CAACC,WAAW,CAACL,MAAM;MAAtCH,MAAM,yBAANA,MAAM;MAAEC;IAEhB,IAAID,MAAM,KAAKG,MAAM,CAACH,MAAM,IAAIC,KAAK,KAAKE,MAAM,CAACF,KAAK,EAAE;MACtD;IACF;IAEAG,SAAS,CAAC;MACRJ,MAAM,EAANA,MAAM;MACNC,KAAK,EAALA,KAAK;MACLC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC,EACD,CAACC,MAAM,CAACH,MAAM,EAAEG,MAAM,CAACF,KAAK,CAAC,CAC9B;EAED,OAAO,CAACE,MAAM,EAAEE,QAAQ,CAAC;AAC3B","names":["React","useLayout","useState","height","width","measured","layout","setLayout","onLayout","useCallback","e","nativeEvent"],"sources":["useLayout.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { LayoutChangeEvent } from 'react-native';\n\nexport default function useLayout() {\n  const [layout, setLayout] = React.useState<{\n    height: number;\n    width: number;\n    measured: boolean;\n  }>({ height: 0, width: 0, measured: false });\n\n  const onLayout = React.useCallback(\n    (e: LayoutChangeEvent) => {\n      const { height, width } = e.nativeEvent.layout;\n\n      if (height === layout.height && width === layout.width) {\n        return;\n      }\n\n      setLayout({\n        height,\n        width,\n        measured: true,\n      });\n    },\n    [layout.height, layout.width]\n  );\n\n  return [layout, onLayout] as const;\n}\n"]},"metadata":{},"sourceType":"module"}