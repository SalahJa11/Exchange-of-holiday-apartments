{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport color from 'color';\nimport { MD3LightTheme } from \"./LightTheme\";\nimport { MD3Colors, tokens } from \"./tokens\";\nvar _tokens$md$ref = tokens.md.ref,\n  palette = _tokens$md$ref.palette,\n  opacity = _tokens$md$ref.opacity;\nexport var MD3DarkTheme = _objectSpread(_objectSpread({}, MD3LightTheme), {}, {\n  dark: true,\n  mode: 'adaptive',\n  version: 3,\n  isV3: true,\n  colors: {\n    primary: palette.primary80,\n    primaryContainer: palette.primary30,\n    secondary: palette.secondary80,\n    secondaryContainer: palette.secondary30,\n    tertiary: palette.tertiary80,\n    tertiaryContainer: palette.tertiary30,\n    surface: palette.neutral10,\n    surfaceVariant: palette.neutralVariant30,\n    surfaceDisabled: color(palette.neutral90).alpha(opacity.level2).rgb().string(),\n    background: palette.neutral10,\n    error: palette.error80,\n    errorContainer: palette.error30,\n    onPrimary: palette.primary20,\n    onPrimaryContainer: palette.primary90,\n    onSecondary: palette.secondary20,\n    onSecondaryContainer: palette.secondary90,\n    onTertiary: palette.tertiary20,\n    onTertiaryContainer: palette.tertiary90,\n    onSurface: palette.neutral90,\n    onSurfaceVariant: palette.neutralVariant80,\n    onSurfaceDisabled: color(palette.neutral90).alpha(opacity.level4).rgb().string(),\n    onError: palette.error20,\n    onErrorContainer: palette.error80,\n    onBackground: palette.neutral90,\n    outline: palette.neutralVariant60,\n    outlineVariant: palette.neutralVariant30,\n    inverseSurface: palette.neutral90,\n    inverseOnSurface: palette.neutral20,\n    inversePrimary: palette.primary40,\n    shadow: palette.neutral0,\n    scrim: palette.neutral0,\n    backdrop: color(MD3Colors.neutralVariant20).alpha(0.4).rgb().string(),\n    elevation: {\n      level0: 'transparent',\n      level1: 'rgb(37, 35, 42)',\n      level2: 'rgb(44, 40, 49)',\n      level3: 'rgb(49, 44, 56)',\n      level4: 'rgb(51, 46, 58)',\n      level5: 'rgb(52, 49, 63)'\n    }\n  }\n});","map":{"version":3,"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,SAASC,aAAa;AACtB,SAASC,SAAS,EAAEC,MAAM;AAE1B,qBAA6BA,MAAM,CAACC,EAAE,CAACC,GAAG;EAAlCC,OAAO,kBAAPA,OAAO;EAAEC;AAEjB,OAAO,IAAMC,YAAsB,mCAC9BP,aAAa;EAChBQ,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,UAAU;EAChBC,OAAO,EAAE,CAAC;EACVC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE;IACNC,OAAO,EAAER,OAAO,CAACS,SAAS;IAC1BC,gBAAgB,EAAEV,OAAO,CAACW,SAAS;IACnCC,SAAS,EAAEZ,OAAO,CAACa,WAAW;IAC9BC,kBAAkB,EAAEd,OAAO,CAACe,WAAW;IACvCC,QAAQ,EAAEhB,OAAO,CAACiB,UAAU;IAC5BC,iBAAiB,EAAElB,OAAO,CAACmB,UAAU;IACrCC,OAAO,EAAEpB,OAAO,CAACqB,SAAS;IAC1BC,cAAc,EAAEtB,OAAO,CAACuB,gBAAgB;IACxCC,eAAe,EAAE9B,KAAK,CAACM,OAAO,CAACyB,SAAS,CAAC,CACtCC,KAAK,CAACzB,OAAO,CAAC0B,MAAM,CAAC,CACrBC,GAAG,EAAE,CACLC,MAAM,EAAE;IACXC,UAAU,EAAE9B,OAAO,CAACqB,SAAS;IAC7BU,KAAK,EAAE/B,OAAO,CAACgC,OAAO;IACtBC,cAAc,EAAEjC,OAAO,CAACkC,OAAO;IAC/BC,SAAS,EAAEnC,OAAO,CAACoC,SAAS;IAC5BC,kBAAkB,EAAErC,OAAO,CAACsC,SAAS;IACrCC,WAAW,EAAEvC,OAAO,CAACwC,WAAW;IAChCC,oBAAoB,EAAEzC,OAAO,CAAC0C,WAAW;IACzCC,UAAU,EAAE3C,OAAO,CAAC4C,UAAU;IAC9BC,mBAAmB,EAAE7C,OAAO,CAAC8C,UAAU;IACvCC,SAAS,EAAE/C,OAAO,CAACyB,SAAS;IAC5BuB,gBAAgB,EAAEhD,OAAO,CAACiD,gBAAgB;IAC1CC,iBAAiB,EAAExD,KAAK,CAACM,OAAO,CAACyB,SAAS,CAAC,CACxCC,KAAK,CAACzB,OAAO,CAACkD,MAAM,CAAC,CACrBvB,GAAG,EAAE,CACLC,MAAM,EAAE;IACXuB,OAAO,EAAEpD,OAAO,CAACqD,OAAO;IACxBC,gBAAgB,EAAEtD,OAAO,CAACgC,OAAO;IACjCuB,YAAY,EAAEvD,OAAO,CAACyB,SAAS;IAC/B+B,OAAO,EAAExD,OAAO,CAACyD,gBAAgB;IACjCC,cAAc,EAAE1D,OAAO,CAACuB,gBAAgB;IACxCoC,cAAc,EAAE3D,OAAO,CAACyB,SAAS;IACjCmC,gBAAgB,EAAE5D,OAAO,CAAC6D,SAAS;IACnCC,cAAc,EAAE9D,OAAO,CAAC+D,SAAS;IACjCC,MAAM,EAAEhE,OAAO,CAACiE,QAAQ;IACxBC,KAAK,EAAElE,OAAO,CAACiE,QAAQ;IACvBE,QAAQ,EAAEzE,KAAK,CAACE,SAAS,CAACwE,gBAAgB,CAAC,CAAC1C,KAAK,CAAC,GAAG,CAAC,CAACE,GAAG,EAAE,CAACC,MAAM,EAAE;IACrEwC,SAAS,EAAE;MACTC,MAAM,EAAE,aAAa;MAIrBC,MAAM,EAAE,iBAAiB;MACzB5C,MAAM,EAAE,iBAAiB;MACzB6C,MAAM,EAAE,iBAAiB;MACzBrB,MAAM,EAAE,iBAAiB;MACzBsB,MAAM,EAAE;IACV;EACF;AAAA,EACD","names":["color","MD3LightTheme","MD3Colors","tokens","md","ref","palette","opacity","MD3DarkTheme","dark","mode","version","isV3","colors","primary","primary80","primaryContainer","primary30","secondary","secondary80","secondaryContainer","secondary30","tertiary","tertiary80","tertiaryContainer","tertiary30","surface","neutral10","surfaceVariant","neutralVariant30","surfaceDisabled","neutral90","alpha","level2","rgb","string","background","error","error80","errorContainer","error30","onPrimary","primary20","onPrimaryContainer","primary90","onSecondary","secondary20","onSecondaryContainer","secondary90","onTertiary","tertiary20","onTertiaryContainer","tertiary90","onSurface","onSurfaceVariant","neutralVariant80","onSurfaceDisabled","level4","onError","error20","onErrorContainer","onBackground","outline","neutralVariant60","outlineVariant","inverseSurface","inverseOnSurface","neutral20","inversePrimary","primary40","shadow","neutral0","scrim","backdrop","neutralVariant20","elevation","level0","level1","level3","level5"],"sources":["DarkTheme.tsx"],"sourcesContent":["import color from 'color';\n\nimport type { MD3Theme } from '../../../types';\nimport { MD3LightTheme } from './LightTheme';\nimport { MD3Colors, tokens } from './tokens';\n\nconst { palette, opacity } = tokens.md.ref;\n\nexport const MD3DarkTheme: MD3Theme = {\n  ...MD3LightTheme,\n  dark: true,\n  mode: 'adaptive',\n  version: 3,\n  isV3: true,\n  colors: {\n    primary: palette.primary80,\n    primaryContainer: palette.primary30,\n    secondary: palette.secondary80,\n    secondaryContainer: palette.secondary30,\n    tertiary: palette.tertiary80,\n    tertiaryContainer: palette.tertiary30,\n    surface: palette.neutral10,\n    surfaceVariant: palette.neutralVariant30,\n    surfaceDisabled: color(palette.neutral90)\n      .alpha(opacity.level2)\n      .rgb()\n      .string(),\n    background: palette.neutral10,\n    error: palette.error80,\n    errorContainer: palette.error30,\n    onPrimary: palette.primary20,\n    onPrimaryContainer: palette.primary90,\n    onSecondary: palette.secondary20,\n    onSecondaryContainer: palette.secondary90,\n    onTertiary: palette.tertiary20,\n    onTertiaryContainer: palette.tertiary90,\n    onSurface: palette.neutral90,\n    onSurfaceVariant: palette.neutralVariant80,\n    onSurfaceDisabled: color(palette.neutral90)\n      .alpha(opacity.level4)\n      .rgb()\n      .string(),\n    onError: palette.error20,\n    onErrorContainer: palette.error80,\n    onBackground: palette.neutral90,\n    outline: palette.neutralVariant60,\n    outlineVariant: palette.neutralVariant30,\n    inverseSurface: palette.neutral90,\n    inverseOnSurface: palette.neutral20,\n    inversePrimary: palette.primary40,\n    shadow: palette.neutral0,\n    scrim: palette.neutral0,\n    backdrop: color(MD3Colors.neutralVariant20).alpha(0.4).rgb().string(),\n    elevation: {\n      level0: 'transparent',\n      // Note: Color values with transparency cause RN to transfer shadows to children nodes\n      // instead of View component in Surface. Providing solid background fixes the issue.\n      // Opaque color values generated with `palette.primary80` used as background\n      level1: 'rgb(37, 35, 42)', // palette.primary80, alpha 0.05\n      level2: 'rgb(44, 40, 49)', // palette.primary80, alpha 0.08\n      level3: 'rgb(49, 44, 56)', // palette.primary80, alpha 0.11\n      level4: 'rgb(51, 46, 58)', // palette.primary80, alpha 0.12\n      level5: 'rgb(52, 49, 63)', // palette.primary80, alpha 0.14\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}