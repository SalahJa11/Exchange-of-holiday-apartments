{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n  _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from \"./helpers\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\nvar TextInputOutlined = function (_React$Component) {\n  _inherits(TextInputOutlined, _React$Component);\n  var _super = _createSuper(TextInputOutlined);\n  function TextInputOutlined() {\n    _classCallCheck(this, TextInputOutlined);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _affixTopPosition, _onAffixChange, _topPosition;\n      var _this$props = this.props,\n        disabled = _this$props.disabled,\n        editable = _this$props.editable,\n        label = _this$props.label,\n        error = _this$props.error,\n        selectionColor = _this$props.selectionColor,\n        underlineColor = _this$props.underlineColor,\n        customOutlineColor = _this$props.outlineColor,\n        activeOutlineColor = _this$props.activeOutlineColor,\n        dense = _this$props.dense,\n        style = _this$props.style,\n        theme = _this$props.theme,\n        render = _this$props.render,\n        multiline = _this$props.multiline,\n        parentState = _this$props.parentState,\n        innerRef = _this$props.innerRef,\n        onFocus = _this$props.onFocus,\n        forceFocus = _this$props.forceFocus,\n        onBlur = _this$props.onBlur,\n        onChangeText = _this$props.onChangeText,\n        onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n        onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,\n        onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,\n        left = _this$props.left,\n        right = _this$props.right,\n        placeholderTextColor = _this$props.placeholderTextColor,\n        rest = _objectWithoutProperties(_this$props, _excluded);\n      var adornmentConfig = getAdornmentConfig({\n        left: left,\n        right: right\n      });\n      var colors = theme.colors,\n        fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n      var _ref = StyleSheet.flatten(style) || {},\n        fontSizeStyle = _ref.fontSize,\n        fontWeight = _ref.fontWeight,\n        lineHeight = _ref.lineHeight,\n        height = _ref.height,\n        _ref$backgroundColor = _ref.backgroundColor,\n        backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,\n        textAlign = _ref.textAlign,\n        viewStyle = _objectWithoutProperties(_ref, _excluded2);\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n      if (disabled) {\n        var isTransparent = color(customOutlineColor).alpha() === 0;\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = colors.disabled;\n        outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n        placeholderColor = colors.placeholder;\n        outlineColor = customOutlineColor || colors.placeholder;\n        errorColor = colors.error;\n      }\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n      var labelTranslationXOffset = 0;\n      var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n        var side = _ref2.side,\n          type = _ref2.type;\n        return side === AdornmentSide.Left && type === AdornmentType.Icon;\n      });\n      if (isAdornmentLeftIcon) {\n        labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n      }\n      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n      if (height && typeof height !== 'number') {\n        console.warn('Currently we support only numbers in height prop');\n      }\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        lineHeight: lineHeight,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        backgroundColor: backgroundColor,\n        errorColor: errorColor,\n        labelTranslationXOffset: labelTranslationXOffset,\n        roundness: theme.roundness\n      };\n      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var leftLayout = parentState.leftLayout,\n        rightLayout = parentState.rightLayout;\n      var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: leftLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: rightLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: ADORNMENT_SIZE,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n        adornmentConfig: adornmentConfig,\n        rightAffixWidth: rightAffixWidth,\n        leftAffixWidth: leftAffixWidth,\n        mode: 'outlined'\n      });\n      var affixTopPosition = (_affixTopPosition = {}, _defineProperty2(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty2(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n      var onAffixChange = (_onAffixChange = {}, _defineProperty2(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty2(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n      var adornmentProps = {\n        adornmentConfig: adornmentConfig,\n        forceFocus: forceFocus,\n        topPosition: (_topPosition = {}, _defineProperty2(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty2(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n        onAffixChange: onAffixChange,\n        isTextInputFocused: parentState.focused\n      };\n      if (adornmentConfig.length) {\n        adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n          left: left,\n          right: right,\n          textStyle: _objectSpread(_objectSpread({}, font), {}, {\n            fontSize: fontSize,\n            fontWeight: fontWeight\n          }),\n          visible: this.props.parentState.labeled\n        });\n      }\n      return React.createElement(View, {\n        style: viewStyle\n      }, React.createElement(Outline, {\n        theme: theme,\n        hasActiveOutline: hasActiveOutline,\n        focused: parentState.focused,\n        activeColor: activeColor,\n        outlineColor: outlineColor,\n        backgroundColor: backgroundColor\n      }), React.createElement(View, null, React.createElement(View, {\n        style: [styles.labelContainer, {\n          paddingTop: LABEL_PADDING_TOP,\n          minHeight: minHeight\n        }]\n      }, React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps,\n        labelBackground: LabelBackground\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n        testID: 'text-input-outlined'\n      }, rest), {}, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderTextColor || placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, !multiline || multiline && height ? {\n          height: inputHeight\n        } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center',\n          textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n        }), Platform.OS === 'web' && {\n          outline: 'none'\n        }, adornmentStyleAdjustmentForNativeInput]\n      }))), React.createElement(TextInputAdornment, adornmentProps)));\n    }\n  }]);\n  return TextInputOutlined;\n}(React.Component);\n_defineProperty(TextInputOutlined, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, props);\n  }\n});\nexport default TextInputOutlined;\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n    hasActiveOutline = _ref3.hasActiveOutline,\n    activeColor = _ref3.activeColor,\n    outlineColor = _ref3.outlineColor,\n    focused = _ref3.focused,\n    backgroundColor = _ref3.backgroundColor;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["React","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","render","props","disabled","editable","label","error","selectionColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","dense","style","theme","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","alpha","text","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","roundness","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","View","Outline","labelContainer","paddingTop","labelBackground","testID","ref","underlineColorAndroid","input","textAlignVertical","outline","Component","NativeTextInput","pointerEvents","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      outlineColor: customOutlineColor,\n      activeOutlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = getAdornmentConfig({ left, right });\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      lineHeight,\n      height,\n      backgroundColor = colors.background,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      const isTransparent = color(customOutlineColor).alpha() === 0;\n\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      outlineColor = customOutlineColor || colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      lineHeight,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor: backgroundColor as ColorValue,\n      errorColor,\n      labelTranslationXOffset,\n      roundness: theme.roundness,\n    };\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        mode: 'outlined',\n      }\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <Outline\n          theme={theme}\n          hasActiveOutline={hasActiveOutline}\n          focused={parentState.focused}\n          activeColor={activeColor}\n          outlineColor={outlineColor}\n          backgroundColor={backgroundColor}\n        />\n        <View>\n          <View\n            style={[\n              styles.labelContainer,\n              {\n                paddingTop: LABEL_PADDING_TOP,\n                minHeight,\n              },\n            ]}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              testID: 'text-input-outlined',\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderTextColor || placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                  textAlign: textAlign\n                    ? textAlign\n                    : I18nManager.isRTL\n                    ? 'right'\n                    : 'left',\n                },\n                Platform.OS === 'web' && { outline: 'none' },\n                adornmentStyleAdjustmentForNativeInput,\n              ],\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}