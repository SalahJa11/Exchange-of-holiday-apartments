{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar _Reanimated$default$c, _Reanimated$default;\nimport React, { useEffect, useRef } from 'react';\nimport { BaseGesture, CALLBACK_TYPE } from \"./gesture\";\nimport { Reanimated } from \"./reanimatedWrapper\";\nimport { registerHandler, unregisterHandler } from \"../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../RNGestureHandlerModule\";\nimport { baseGestureHandlerWithMonitorProps, filterConfig, findNodeHandle } from \"../gestureHandlerCommon\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nimport { flingGestureHandlerProps } from \"../FlingGestureHandler\";\nimport { forceTouchGestureHandlerProps } from \"../ForceTouchGestureHandler\";\nimport { longPressGestureHandlerProps } from \"../LongPressGestureHandler\";\nimport { panGestureHandlerProps, panGestureHandlerCustomNativeProps } from \"../PanGestureHandler\";\nimport { tapGestureHandlerProps } from \"../TapGestureHandler\";\nimport { State } from \"../../State\";\nimport { EventType } from \"../../EventType\";\nvar ALLOWED_PROPS = [].concat(_toConsumableArray(baseGestureHandlerWithMonitorProps), _toConsumableArray(tapGestureHandlerProps), _toConsumableArray(panGestureHandlerProps), _toConsumableArray(panGestureHandlerCustomNativeProps), _toConsumableArray(longPressGestureHandlerProps), _toConsumableArray(forceTouchGestureHandlerProps), _toConsumableArray(flingGestureHandlerProps));\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n    unregisterHandler(handler.handlerTag);\n  }\n}\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n    gestureConfig = _ref.gestureConfig,\n    gesture = _ref.gesture,\n    viewTag = _ref.viewTag,\n    useAnimated = _ref.useAnimated;\n  if (!preparedGesture.firstExecution) {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n  setImmediate(function () {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  });\n  var _loop = function _loop(handler) {\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler);\n    setImmediate(function () {\n      var requireToFail = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n      var simultaneousWith = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n      }\n      RNGestureHandlerModule.updateGestureHandler(handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n    });\n  };\n  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n    _loop(handler);\n  }\n  preparedGesture.config = gesture;\n  for (var _iterator3 = _createForOfIteratorHelperLoose(preparedGesture.config), _step3; !(_step3 = _iterator3()).done;) {\n    var _gesture = _step3.value;\n    RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, !useAnimated);\n  }\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = gesture.map(function (g) {\n      return g.handlers;\n    });\n  }\n}\nfunction updateHandlers(preparedGesture, gestureConfig, gesture) {\n  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n    gesture[i].handlerTag = handler.handlerTag;\n    gesture[i].handlers.handlerTag = handler.handlerTag;\n  }\n  setImmediate(function () {\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler = preparedGesture.config[_i];\n      _handler.config = gesture[_i].config;\n      _handler.handlers = gesture[_i].handlers;\n      _handler.handlers.handlerTag = _handler.handlerTag;\n      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n      registerHandler(_handler.handlerTag, _handler);\n    }\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = preparedGesture.config.map(function (g) {\n        return g.handlers;\n      });\n    }\n  });\n}\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction useAnimatedGesture(preparedGesture) {\n  if (!Reanimated) {\n    return;\n  }\n  function isStateChangeEvent(event) {\n    'worklet';\n    return event.oldState != null;\n  }\n  function isTouchEvent(event) {\n    'worklet';\n\n    return event.eventType != null;\n  }\n  function getHandler(type, gesture) {\n    'worklet';\n\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n  function touchEventTypeToCallbackType(eventType) {\n    'worklet';\n\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n  function runWorklet(type, gesture, event) {\n    'worklet';\n\n    var handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n      handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n  var sharedHandlersCallbacks = Reanimated.useSharedValue(null);\n  var lastUpdateEvent = Reanimated.useSharedValue([]);\n  var stateControllers = [];\n  var callback = function callback(event) {\n    'worklet';\n\n    var currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n    for (var i = 0; i < currentCallback.length; i++) {\n      var gesture = currentCallback[i];\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (event.oldState !== event.state && event.state === State.END) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.state !== event.oldState) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            var _gesture$changeEventC;\n            runWorklet(CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n  var event = Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], true);\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\nexport var GestureDetector = function GestureDetector(props) {\n  var _gestureConfig$toGest, _gestureConfig$toGest2;\n  var gestureConfig = props.gesture;\n  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];\n  var useAnimated = gesture.find(function (gesture) {\n    return gesture.handlers.isWorklet.reduce(function (prev, current) {\n      return prev || current;\n    });\n  }) != null;\n  var viewRef = useRef(null);\n  var firstRenderRef = useRef(true);\n  var preparedGesture = React.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated\n  }).current;\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error('You cannot change whether you are using gesture or animatedGesture while the app is running');\n  }\n  if (preparedGesture.firstExecution) {\n    var _gestureConfig$initia;\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);\n  }\n  if (useAnimated) {\n    useAnimatedGesture(preparedGesture);\n  }\n  useEffect(function () {\n    firstRenderRef.current = true;\n    var viewTag = findNodeHandle(viewRef.current);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      viewTag: viewTag,\n      useAnimated: useAnimated\n    });\n    return function () {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  useEffect(function () {\n    if (!firstRenderRef.current) {\n      var viewTag = findNodeHandle(viewRef.current);\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture: preparedGesture,\n          gestureConfig: gestureConfig,\n          gesture: gesture,\n          viewTag: viewTag,\n          useAnimated: useAnimated\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n  if (useAnimated) {\n    return React.createElement(AnimatedWrap, {\n      ref: viewRef,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return React.createElement(Wrap, {\n      ref: viewRef\n    }, props.children);\n  }\n};\nvar Wrap = function (_React$Component) {\n  _inherits(Wrap, _React$Component);\n  var _super = _createSuper(Wrap);\n  function Wrap() {\n    _classCallCheck(this, Wrap);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      var child = React.Children.only(this.props.children);\n      return React.cloneElement(child, {\n        collapsable: false\n      }, child.props.children);\n    }\n  }]);\n  return Wrap;\n}(React.Component);\nvar AnimatedWrap = (_Reanimated$default$c = Reanimated === null || Reanimated === void 0 ? void 0 : (_Reanimated$default = Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","BaseGesture","CALLBACK_TYPE","Reanimated","registerHandler","unregisterHandler","RNGestureHandlerModule","baseGestureHandlerWithMonitorProps","filterConfig","findNodeHandle","GestureStateManager","flingGestureHandlerProps","forceTouchGestureHandlerProps","longPressGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","tapGestureHandlerProps","State","EventType","ALLOWED_PROPS","convertToHandlerTag","ref","handlerTag","current","_ref$current","extractValidHandlerTags","interactionGroup","map","_interactionGroup$map2","filter","tag","dropHandlers","preparedGesture","config","handler","dropGestureHandler","attachHandlers","gestureConfig","gesture","viewTag","useAnimated","firstExecution","initialize","setImmediate","prepare","createGestureHandler","handlerName","requireToFail","simultaneousWith","updateGestureHandler","simultaneousHandlers","waitFor","attachGestureHandler","animatedHandlers","value","g","handlers","updateHandlers","i","length","needsToReattach","useAnimatedGesture","isStateChangeEvent","event","oldState","isTouchEvent","eventType","getHandler","type","BEGAN","onBegin","START","onStart","UPDATE","onUpdate","CHANGE","onChange","END","onEnd","FINALIZE","onFinalize","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","touchEventTypeToCallbackType","UNDEFINED","runWorklet","isWorklet","args","console","warn","sharedHandlersCallbacks","useSharedValue","lastUpdateEvent","stateControllers","callback","currentCallback","UNDETERMINED","state","ACTIVE","undefined","FAILED","CANCELLED","create","changeEventCalculator","_gesture$changeEventC","useEvent","animatedEventHandler","GestureDetector","props","toGestureArray","_gestureConfig$toGest2","find","reduce","prev","viewRef","firstRenderRef","Error","AnimatedWrap","onGestureHandlerEvent","children","Wrap","render","child","Children","only","cloneElement","collapsable","Component","default","_Reanimated$default","createAnimatedComponent"],"sources":["GestureDetector.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport { ComposedGesture } from './gestureComposition';\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useAnimated: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag);\n  }\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType | undefined;\n  gesture: GestureType[];\n  viewTag: number;\n  useAnimated: boolean;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n  useAnimated,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig?.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    gestureConfig?.prepare();\n  });\n\n  for (const handler of gesture) {\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler);\n\n    // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(() => {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n    });\n  }\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    RNGestureHandlerModule.attachGestureHandler(\n      gesture.handlerTag,\n      viewTag,\n      !useAnimated // send direct events when using animatedGesture, device events otherwise\n    );\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = (gesture.map(\n      (g) => g.handlers\n    ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType | undefined,\n  gesture: GestureType[]\n) {\n  gestureConfig?.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n\n    gesture[i].handlerTag = handler.handlerTag;\n    gesture[i].handlers.handlerTag = handler.handlerTag;\n  }\n\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  setImmediate(() => {\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n      handler.handlers.handlerTag = handler.handlerTag;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = (preparedGesture.config.map(\n        (g) => g.handlers\n      ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n    }\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(preparedGesture: GestureConfigReference) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureStateChangeEvent {\n    'worklet';\n    // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureTouchEvent {\n    'worklet';\n    return event.eventType != null;\n  }\n\n  function getHandler(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>\n  ) {\n    'worklet';\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType: EventType): CALLBACK_TYPE {\n    'worklet';\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>,\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n    ...args: any[]\n  ) {\n    'worklet';\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      // @ts-ignore Logic below makes sure the correct event is send to the\n      // correct handler.\n      handler?.(event, ...args);\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    true\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\ninterface GestureDetectorProps {\n  gesture?: ComposedGesture | GestureType;\n}\nexport const GestureDetector: React.FunctionComponent<GestureDetectorProps> = (\n  props\n) => {\n  const gestureConfig = props.gesture;\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\n  const useAnimated =\n    gesture.find((gesture) =>\n      gesture.handlers.isWorklet.reduce((prev, current) => prev || current)\n    ) != null;\n  const viewRef = useRef(null);\n  const firstRenderRef = useRef(true);\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated,\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error(\n      'You cannot change whether you are using gesture or animatedGesture while the app is running'\n    );\n  }\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig?.initialize?.();\n  }\n\n  if (useAnimated) {\n    // Whether animatedGesture or gesture is used shouldn't change\n    // during while an app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture);\n  }\n\n  useEffect(() => {\n    firstRenderRef.current = true;\n    const viewTag = findNodeHandle(viewRef.current) as number;\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      viewTag,\n      useAnimated,\n    });\n\n    return () => {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!firstRenderRef.current) {\n      const viewTag = findNodeHandle(viewRef.current) as number;\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesture,\n          viewTag,\n          useAnimated,\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return (\n      <AnimatedWrap\n        ref={viewRef}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={viewRef}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{ onGestureHandlerEvent?: unknown }> {\n  render() {\n    // I don't think that fighting with types over such a simple function is worth it\n    // The only thing it does is add 'collapsable: false' to the child component\n    // to make sure it is in the native view hierarchy so the detector can find\n    // correct viewTag to attach to.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const child: any = React.Children.only(this.props.children);\n\n    return React.cloneElement(\n      child,\n      { collapsable: false },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      child.props.children\n    );\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"]},"metadata":{},"sourceType":"module"}